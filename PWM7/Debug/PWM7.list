
PWM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba0  08004ba0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ba0  08004ba0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ba0  08004ba0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000007c  08004c24  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004c24  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2c8  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2f  00000000  00000000  0002d3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  0002ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002500  00000000  00000000  000308c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f37f  00000000  00000000  00032dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00065b7e  00000000  00000000  0004213f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b50  00000000  00000000  000a7cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000aa810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b50 	.word	0x08004b50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004b50 	.word	0x08004b50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	240c      	movs	r4, #12
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2314      	movs	r3, #20
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f004 fb77 	bl	8004af8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040a:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <MX_GPIO_Init+0xcc>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <MX_GPIO_Init+0xcc>)
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	03c9      	lsls	r1, r1, #15
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <MX_GPIO_Init+0xcc>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	03db      	lsls	r3, r3, #15
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <MX_GPIO_Init+0xcc>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_GPIO_Init+0xcc>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	0289      	lsls	r1, r1, #10
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <MX_GPIO_Init+0xcc>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	029b      	lsls	r3, r3, #10
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000442:	2390      	movs	r3, #144	; 0x90
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	2200      	movs	r2, #0
 8000448:	2122      	movs	r1, #34	; 0x22
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fb49 	bl	8001ae2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2288      	movs	r2, #136	; 0x88
 800045a:	0352      	lsls	r2, r2, #13
 800045c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2202      	movs	r2, #2
 8000462:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	193a      	adds	r2, r7, r4
 8000466:	2390      	movs	r3, #144	; 0x90
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	0011      	movs	r1, r2
 800046c:	0018      	movs	r0, r3
 800046e:	f001 f9ab 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2222      	movs	r2, #34	; 0x22
 8000476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2201      	movs	r2, #1
 800047c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	193a      	adds	r2, r7, r4
 800048c:	2390      	movs	r3, #144	; 0x90
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f001 f998 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2210      	movs	r2, #16
 800049c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2202      	movs	r2, #2
 80004a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	193a      	adds	r2, r7, r4
 80004ac:	2390      	movs	r3, #144	; 0x90
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 f988 	bl	80017c8 <HAL_GPIO_Init>

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b009      	add	sp, #36	; 0x24
 80004be:	bd90      	pop	{r4, r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <startBR>:
int timeCount = 0;
uint8_t rx2_data;
uint8_t opcode = '0';
int Charging_Status;

void startBR(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	if(status){
 80004ca:	4b49      	ldr	r3, [pc, #292]	; (80005f0 <startBR+0x12c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d012      	beq.n	80004f8 <startBR+0x34>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80004d2:	4b48      	ldr	r3, [pc, #288]	; (80005f4 <startBR+0x130>)
 80004d4:	2100      	movs	r1, #0
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 f9b0 	bl	800283c <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004dc:	2390      	movs	r3, #144	; 0x90
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2200      	movs	r2, #0
 80004e2:	2102      	movs	r1, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fafc 	bl	8001ae2 <HAL_GPIO_WritePin>
		timeCount=0;
 80004ea:	4b43      	ldr	r3, [pc, #268]	; (80005f8 <startBR+0x134>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
		status = 0;
 80004f0:	4b3f      	ldr	r3, [pc, #252]	; (80005f0 <startBR+0x12c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
				break;
			}
		}

	}
}
 80004f6:	e077      	b.n	80005e8 <startBR+0x124>
		status = 1;
 80004f8:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <startBR+0x12c>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	701a      	strb	r2, [r3, #0]
		PWM_Width = (TIM3->ARR+1)/10;
 80004fe:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <startBR+0x138>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	3301      	adds	r3, #1
 8000504:	210a      	movs	r1, #10
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff fdfe 	bl	8000108 <__udivsi3>
 800050c:	0003      	movs	r3, r0
 800050e:	b29a      	uxth	r2, r3
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <startBR+0x13c>)
 8000512:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000514:	4b37      	ldr	r3, [pc, #220]	; (80005f4 <startBR+0x130>)
 8000516:	2100      	movs	r1, #0
 8000518:	0018      	movs	r0, r3
 800051a:	f002 f8e9 	bl	80026f0 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2201      	movs	r2, #1
 8000524:	2102      	movs	r1, #2
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fadb 	bl	8001ae2 <HAL_GPIO_WritePin>
		while(status){
 800052c:	e058      	b.n	80005e0 <startBR+0x11c>
			if(timeCount <= 1800000){
 800052e:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <startBR+0x134>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a34      	ldr	r2, [pc, #208]	; (8000604 <startBR+0x140>)
 8000534:	4293      	cmp	r3, r2
 8000536:	dc3b      	bgt.n	80005b0 <startBR+0xec>
				Charging_Status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000538:	2390      	movs	r3, #144	; 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2110      	movs	r1, #16
 800053e:	0018      	movs	r0, r3
 8000540:	f001 fab2 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8000544:	0003      	movs	r3, r0
 8000546:	001a      	movs	r2, r3
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <startBR+0x144>)
 800054a:	601a      	str	r2, [r3, #0]
				if(Charging_Status==1){
 800054c:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <startBR+0x144>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d107      	bne.n	8000564 <startBR+0xa0>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000554:	2390      	movs	r3, #144	; 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fac0 	bl	8001ae2 <HAL_GPIO_WritePin>
 8000562:	e03d      	b.n	80005e0 <startBR+0x11c>
				  for(int j=0; j< 10; j++)
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	e009      	b.n	800057e <startBR+0xba>
					  TIM3->CCR1 = PWM_Width*j;
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <startBR+0x13c>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	001a      	movs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	435a      	muls	r2, r3
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <startBR+0x138>)
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
				  for(int j=0; j< 10; j++)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b09      	cmp	r3, #9
 8000582:	ddf2      	ble.n	800056a <startBR+0xa6>
				  for(int k=10; k>0; k--)
 8000584:	230a      	movs	r3, #10
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	e009      	b.n	800059e <startBR+0xda>
					  TIM3->CCR1 = PWM_Width*k;
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <startBR+0x13c>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	001a      	movs	r2, r3
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	435a      	muls	r2, r3
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <startBR+0x138>)
 8000596:	635a      	str	r2, [r3, #52]	; 0x34
				  for(int k=10; k>0; k--)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	3b01      	subs	r3, #1
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dcf2      	bgt.n	800058a <startBR+0xc6>
				timeCount += 1;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <startBR+0x134>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <startBR+0x134>)
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e017      	b.n	80005e0 <startBR+0x11c>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <startBR+0x130>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 f941 	bl	800283c <HAL_TIM_PWM_Stop>
				HAL_TIM_Base_Stop(&htim1);
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <startBR+0x148>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 ffc9 	bl	8002554 <HAL_TIM_Base_Stop>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005c2:	2390      	movs	r3, #144	; 0x90
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2200      	movs	r2, #0
 80005c8:	2102      	movs	r1, #2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fa89 	bl	8001ae2 <HAL_GPIO_WritePin>
				timeCount=0;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <startBR+0x134>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
				status = 0;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <startBR+0x12c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
				break;
 80005dc:	46c0      	nop			; (mov r8, r8)
}
 80005de:	e003      	b.n	80005e8 <startBR+0x124>
		while(status){
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <startBR+0x12c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1a2      	bne.n	800052e <startBR+0x6a>
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000098 	.word	0x20000098
 80005f4:	200000f0 	.word	0x200000f0
 80005f8:	2000009c 	.word	0x2000009c
 80005fc:	40000400 	.word	0x40000400
 8000600:	2000006e 	.word	0x2000006e
 8000604:	001b7740 	.word	0x001b7740
 8000608:	200000a4 	.word	0x200000a4
 800060c:	200000a8 	.word	0x200000a8

08000610 <Sound_Open>:
void Sound_Open(){
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <Sound_Open+0xe0>)
 8000618:	2100      	movs	r1, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f002 f868 	bl	80026f0 <HAL_TIM_PWM_Start>
	for(int i=0; i < (sizeof(LG_Bell)/sizeof(LG_Bell[0])); i++)
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e055      	b.n	80006d2 <Sound_Open+0xc2>
	{

	  TIM3->ARR = LG_Bell[i]-1;
 8000626:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <Sound_Open+0xe4>)
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	5ad3      	ldrh	r3, [r2, r3]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <Sound_Open+0xe8>)
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
//	  TIM3->CCR1 = TIM3->ARR/2-1;
	  PWM_Width = (TIM3->ARR+1)/500;
 8000634:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <Sound_Open+0xe8>)
 8000636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000638:	3301      	adds	r3, #1
 800063a:	22fa      	movs	r2, #250	; 0xfa
 800063c:	0051      	lsls	r1, r2, #1
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff fd62 	bl	8000108 <__udivsi3>
 8000644:	0003      	movs	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <Sound_Open+0xec>)
 800064a:	801a      	strh	r2, [r3, #0]

		  for(int j=100; j< 200; j++)
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	e019      	b.n	8000686 <Sound_Open+0x76>
		  {
			  TIM3->CCR1 = (TIM3->ARR/4-1) + PWM_Width*j;
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <Sound_Open+0xe8>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	4a28      	ldr	r2, [pc, #160]	; (80006fc <Sound_Open+0xec>)
 800065a:	8812      	ldrh	r2, [r2, #0]
 800065c:	0011      	movs	r1, r2
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	434a      	muls	r2, r1
 8000662:	189a      	adds	r2, r3, r2
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <Sound_Open+0xe8>)
 8000666:	3a01      	subs	r2, #1
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
			  delay_us(LG_interval[i]*5);
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <Sound_Open+0xf0>)
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	5ad3      	ldrh	r3, [r2, r3]
 8000672:	1c1a      	adds	r2, r3, #0
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	b29b      	uxth	r3, r3
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fa8a 	bl	8000b94 <delay_us>
		  for(int j=100; j< 200; j++)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	3301      	adds	r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2bc7      	cmp	r3, #199	; 0xc7
 800068a:	dde2      	ble.n	8000652 <Sound_Open+0x42>
		  }
		  for(int k=200; k>100; k--)
 800068c:	23c8      	movs	r3, #200	; 0xc8
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	e019      	b.n	80006c6 <Sound_Open+0xb6>
		  {
			  TIM3->CCR1 = (TIM3->ARR/4-1) + PWM_Width*k;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <Sound_Open+0xe8>)
 8000694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	4a18      	ldr	r2, [pc, #96]	; (80006fc <Sound_Open+0xec>)
 800069a:	8812      	ldrh	r2, [r2, #0]
 800069c:	0011      	movs	r1, r2
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	434a      	muls	r2, r1
 80006a2:	189a      	adds	r2, r3, r2
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <Sound_Open+0xe8>)
 80006a6:	3a01      	subs	r2, #1
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
			  delay_us(LG_interval[i]*5);
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <Sound_Open+0xf0>)
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	5ad3      	ldrh	r3, [r2, r3]
 80006b2:	1c1a      	adds	r2, r3, #0
 80006b4:	0092      	lsls	r2, r2, #2
 80006b6:	18d3      	adds	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fa6a 	bl	8000b94 <delay_us>
		  for(int k=200; k>100; k--)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b64      	cmp	r3, #100	; 0x64
 80006ca:	dce2      	bgt.n	8000692 <Sound_Open+0x82>
	for(int i=0; i < (sizeof(LG_Bell)/sizeof(LG_Bell[0])); i++)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b1a      	cmp	r3, #26
 80006d6:	d9a6      	bls.n	8000626 <Sound_Open+0x16>
		  }

//	  HAL_Delay(interval[i]);

	}
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <Sound_Open+0xe0>)
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 f8ad 	bl	800283c <HAL_TIM_PWM_Stop>


	 		//40Hz = 500, 12Hz = 1666, 10Hz = 2000, 8Hz = 2500
	  TIM3->ARR = 50000-1;
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <Sound_Open+0xe8>)
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <Sound_Open+0xf4>)
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
//	    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)IV, 10);

//	  PWM_Width = TIM3->ARR/1000;
//	  up_pulse = 1;

}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b004      	add	sp, #16
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000f0 	.word	0x200000f0
 80006f4:	20000000 	.word	0x20000000
 80006f8:	40000400 	.word	0x40000400
 80006fc:	2000006e 	.word	0x2000006e
 8000700:	20000038 	.word	0x20000038
 8000704:	0000c34f 	.word	0x0000c34f

08000708 <Sound_Close>:
	  freq = 5000;		//40Hz = 500, 12Hz = 1666, 10Hz = 2000, 8Hz = 2500
	  TIM3->ARR = freq-1;
	  TIM3->CCR1 = freq/2-1;
}*/

void Sound_Close(){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	  int freq = 1900;
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <Sound_Close+0x104>)
 8000710:	607b      	str	r3, [r7, #4]
	  TIM3->ARR = freq-1;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	1e5a      	subs	r2, r3, #1
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <Sound_Close+0x108>)
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->CCR1 = freq/2-1;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	da00      	bge.n	8000722 <Sound_Close+0x1a>
 8000720:	3301      	adds	r3, #1
 8000722:	105b      	asrs	r3, r3, #1
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <Sound_Close+0x108>)
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <Sound_Close+0x10c>)
 800072c:	2100      	movs	r1, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f001 ffde 	bl	80026f0 <HAL_TIM_PWM_Start>
	  HAL_Delay(550);
 8000734:	4b38      	ldr	r3, [pc, #224]	; (8000818 <Sound_Close+0x110>)
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fdc0 	bl	80012bc <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <Sound_Close+0x10c>)
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f002 f87b 	bl	800283c <HAL_TIM_PWM_Stop>
	  freq = 2500;
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <Sound_Close+0x114>)
 8000748:	607b      	str	r3, [r7, #4]
	  TIM3->ARR = freq-1;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <Sound_Close+0x108>)
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->CCR1 = freq/2-1;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b00      	cmp	r3, #0
 8000756:	da00      	bge.n	800075a <Sound_Close+0x52>
 8000758:	3301      	adds	r3, #1
 800075a:	105b      	asrs	r3, r3, #1
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <Sound_Close+0x108>)
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <Sound_Close+0x10c>)
 8000764:	2100      	movs	r1, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f001 ffc2 	bl	80026f0 <HAL_TIM_PWM_Start>
	  HAL_Delay(250);
 800076c:	20fa      	movs	r0, #250	; 0xfa
 800076e:	f000 fda5 	bl	80012bc <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <Sound_Close+0x10c>)
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f002 f860 	bl	800283c <HAL_TIM_PWM_Stop>
	  freq = 3000;
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <Sound_Close+0x118>)
 800077e:	607b      	str	r3, [r7, #4]
	  TIM3->ARR = freq-1;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <Sound_Close+0x108>)
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->CCR1 = freq/2-1;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da00      	bge.n	8000790 <Sound_Close+0x88>
 800078e:	3301      	adds	r3, #1
 8000790:	105b      	asrs	r3, r3, #1
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <Sound_Close+0x108>)
 8000796:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <Sound_Close+0x10c>)
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f001 ffa7 	bl	80026f0 <HAL_TIM_PWM_Start>
	  HAL_Delay(250);
 80007a2:	20fa      	movs	r0, #250	; 0xfa
 80007a4:	f000 fd8a 	bl	80012bc <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <Sound_Close+0x10c>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 f845 	bl	800283c <HAL_TIM_PWM_Stop>
	  freq = 3800;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <Sound_Close+0x11c>)
 80007b4:	607b      	str	r3, [r7, #4]
	  TIM3->ARR = freq-1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <Sound_Close+0x108>)
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->CCR1 = freq/2-1;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	da00      	bge.n	80007c6 <Sound_Close+0xbe>
 80007c4:	3301      	adds	r3, #1
 80007c6:	105b      	asrs	r3, r3, #1
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <Sound_Close+0x108>)
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <Sound_Close+0x10c>)
 80007d0:	2100      	movs	r1, #0
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 ff8c 	bl	80026f0 <HAL_TIM_PWM_Start>
	  HAL_Delay(250);
 80007d8:	20fa      	movs	r0, #250	; 0xfa
 80007da:	f000 fd6f 	bl	80012bc <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <Sound_Close+0x10c>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 f82a 	bl	800283c <HAL_TIM_PWM_Stop>
	  freq = 50000;		//40Hz = 500, 12Hz = 1666, 10Hz = 2000, 8Hz = 2500
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <Sound_Close+0x120>)
 80007ea:	607b      	str	r3, [r7, #4]
	  TIM3->ARR = freq-1;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <Sound_Close+0x108>)
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3->CCR1 = freq/2-1;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da00      	bge.n	80007fc <Sound_Close+0xf4>
 80007fa:	3301      	adds	r3, #1
 80007fc:	105b      	asrs	r3, r3, #1
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <Sound_Close+0x108>)
 8000802:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}
 800080c:	0000076c 	.word	0x0000076c
 8000810:	40000400 	.word	0x40000400
 8000814:	200000f0 	.word	0x200000f0
 8000818:	00000226 	.word	0x00000226
 800081c:	000009c4 	.word	0x000009c4
 8000820:	00000bb8 	.word	0x00000bb8
 8000824:	00000ed8 	.word	0x00000ed8
 8000828:	0000c350 	.word	0x0000c350

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fcdf 	bl	80011f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(300);
 8000836:	2396      	movs	r3, #150	; 0x96
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fd3e 	bl	80012bc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f854 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f7ff fdd6 	bl	80003f4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000848:	f000 fb00 	bl	8000e4c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800084c:	f000 fc14 	bl	8001078 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000850:	f000 fa4a 	bl	8000ce8 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000854:	f000 f892 	bl	800097c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <main+0xac>)
 800085a:	0018      	movs	r0, r3
 800085c:	f001 fe3c 	bl	80024d8 <HAL_TIM_Base_Start>
  int Charging;
  Charging = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000860:	2390      	movs	r3, #144	; 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	2110      	movs	r1, #16
 8000866:	0018      	movs	r0, r3
 8000868:	f001 f91e 	bl	8001aa8 <HAL_GPIO_ReadPin>
 800086c:	0003      	movs	r3, r0
 800086e:	607b      	str	r3, [r7, #4]
  if(Charging==1){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d107      	bne.n	8000886 <main+0x5a>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000876:	2390      	movs	r3, #144	; 0x90
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	0018      	movs	r0, r3
 8000880:	f001 f92f 	bl	8001ae2 <HAL_GPIO_WritePin>
 8000884:	e027      	b.n	80008d6 <main+0xaa>
  }
  else{
  HAL_UART_Receive_IT(&huart2, &rx2_data, 1);
 8000886:	4915      	ldr	r1, [pc, #84]	; (80008dc <main+0xb0>)
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <main+0xb4>)
 800088a:	2201      	movs	r2, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f003 f83a 	bl	8003906 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	2201      	movs	r2, #1
 8000898:	2120      	movs	r1, #32
 800089a:	0018      	movs	r0, r3
 800089c:	f001 f921 	bl	8001ae2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80008a0:	2064      	movs	r0, #100	; 0x64
 80008a2:	f000 fd0b 	bl	80012bc <HAL_Delay>
  Sound_Open();
 80008a6:	f7ff feb3 	bl	8000610 <Sound_Open>
  HAL_Delay(1000);
 80008aa:	23fa      	movs	r3, #250	; 0xfa
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fd04 	bl	80012bc <HAL_Delay>
  timeCount = 0;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <main+0xb8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
	status = 0;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <main+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
	startBR();
 80008c0:	f7ff fe00 	bl	80004c4 <startBR>
  Sound_Close();
 80008c4:	f7ff ff20 	bl	8000708 <Sound_Close>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80008c8:	2390      	movs	r3, #144	; 0x90
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	2200      	movs	r2, #0
 80008ce:	2120      	movs	r1, #32
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 f906 	bl	8001ae2 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008d6:	e7fe      	b.n	80008d6 <main+0xaa>
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	2000017c 	.word	0x2000017c
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	20000098 	.word	0x20000098

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b091      	sub	sp, #68	; 0x44
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	2410      	movs	r4, #16
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	0018      	movs	r0, r3
 80008f8:	2330      	movs	r3, #48	; 0x30
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f004 f8fb 	bl	8004af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000902:	003b      	movs	r3, r7
 8000904:	0018      	movs	r0, r3
 8000906:	2310      	movs	r3, #16
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f004 f8f4 	bl	8004af8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	0021      	movs	r1, r4
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2201      	movs	r2, #1
 8000916:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2201      	movs	r2, #1
 800091c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2202      	movs	r2, #2
 8000922:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	0252      	lsls	r2, r2, #9
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0352      	lsls	r2, r2, #13
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	187b      	adds	r3, r7, r1
 800093c:	0018      	movs	r0, r3
 800093e:	f001 f909 	bl	8001b54 <HAL_RCC_OscConfig>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000946:	f000 f950 	bl	8000bea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	003b      	movs	r3, r7
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	003b      	movs	r3, r7
 8000952:	2202      	movs	r2, #2
 8000954:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	003b      	movs	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	003b      	movs	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000962:	003b      	movs	r3, r7
 8000964:	2101      	movs	r1, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fc12 	bl	8002190 <HAL_RCC_ClockConfig>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000970:	f000 f93b 	bl	8000bea <Error_Handler>
  }
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b011      	add	sp, #68	; 0x44
 800097a:	bd90      	pop	{r4, r7, pc}

0800097c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2101      	movs	r1, #1
 8000984:	2005      	movs	r0, #5
 8000986:	f000 fd69 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800098a:	2005      	movs	r0, #5
 800098c:	f000 fd7b 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2102      	movs	r1, #2
 8000994:	2010      	movs	r0, #16
 8000996:	f000 fd61 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800099a:	2010      	movs	r0, #16
 800099c:	f000 fd73 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2103      	movs	r1, #3
 80009a4:	201c      	movs	r0, #28
 80009a6:	f000 fd59 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009aa:	201c      	movs	r0, #28
 80009ac:	f000 fd6b 	bl	8001486 <HAL_NVIC_EnableIRQ>
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
//		TIM3->CCR1 = PWM_Width * T_count;
//		T_count--;
//		if(T_count == 0) { T_count = 0;}
//		if(TIM3->CCR1 == 0) {up_pulse = 1; down_pulse = 0;}
//	}
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a67      	ldr	r2, [pc, #412]	; (8000b74 <HAL_UART_RxCpltCallback+0x1ac>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d000      	beq.n	80009dc <HAL_UART_RxCpltCallback+0x14>
 80009da:	e0c6      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
	{
		HAL_UART_Receive_IT(&huart2, &rx2_data, 1);
 80009dc:	4966      	ldr	r1, [pc, #408]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 80009de:	4b67      	ldr	r3, [pc, #412]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 ff8f 	bl	8003906 <HAL_UART_Receive_IT>
		int freq = 5000;
 80009e8:	4b65      	ldr	r3, [pc, #404]	; (8000b80 <HAL_UART_RxCpltCallback+0x1b8>)
 80009ea:	617b      	str	r3, [r7, #20]
		if(rx2_data=='1')
 80009ec:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b31      	cmp	r3, #49	; 0x31
 80009f2:	d114      	bne.n	8000a1e <HAL_UART_RxCpltCallback+0x56>
		{
			freq = 5000;		//Duty ON:OFF = 50:50
 80009f4:	4b62      	ldr	r3, [pc, #392]	; (8000b80 <HAL_UART_RxCpltCallback+0x1b8>)
 80009f6:	617b      	str	r3, [r7, #20]
			TIM3->ARR = freq-1;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	1e5a      	subs	r2, r3, #1
 80009fc:	4b61      	ldr	r3, [pc, #388]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/2-1;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da00      	bge.n	8000a08 <HAL_UART_RxCpltCallback+0x40>
 8000a06:	3301      	adds	r3, #1
 8000a08:	105b      	asrs	r3, r3, #1
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4b5d      	ldr	r3, [pc, #372]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000a10:	4959      	ldr	r1, [pc, #356]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a12:	485a      	ldr	r0, [pc, #360]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 8000a14:	230a      	movs	r3, #10
 8000a16:	2201      	movs	r2, #1
 8000a18:	f002 fecc 	bl	80037b4 <HAL_UART_Transmit>
			TIM3->CCR1 = freq/2-1;
			//HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
//			HAL_UART_Transmit(&huart2, &opcode, 1, 10);
		}
	}
}
 8000a1c:	e0a5      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
		else if(rx2_data=='2')
 8000a1e:	4b56      	ldr	r3, [pc, #344]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b32      	cmp	r3, #50	; 0x32
 8000a24:	d114      	bne.n	8000a50 <HAL_UART_RxCpltCallback+0x88>
			freq = 5000;		//Duty ON:OFF = 25:75
 8000a26:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <HAL_UART_RxCpltCallback+0x1b8>)
 8000a28:	617b      	str	r3, [r7, #20]
			TIM3->ARR = freq-1;
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4b55      	ldr	r3, [pc, #340]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/4-1;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	da00      	bge.n	8000a3a <HAL_UART_RxCpltCallback+0x72>
 8000a38:	3303      	adds	r3, #3
 8000a3a:	109b      	asrs	r3, r3, #2
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000a42:	494d      	ldr	r1, [pc, #308]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a44:	484d      	ldr	r0, [pc, #308]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 8000a46:	230a      	movs	r3, #10
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f002 feb3 	bl	80037b4 <HAL_UART_Transmit>
}
 8000a4e:	e08c      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
		else if(rx2_data=='3')
 8000a50:	4b49      	ldr	r3, [pc, #292]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b33      	cmp	r3, #51	; 0x33
 8000a56:	d115      	bne.n	8000a84 <HAL_UART_RxCpltCallback+0xbc>
			freq = 5000;		//Duty ON:OFF = 20:80
 8000a58:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <HAL_UART_RxCpltCallback+0x1b8>)
 8000a5a:	617b      	str	r3, [r7, #20]
			TIM3->ARR = freq-1;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/5-1;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2105      	movs	r1, #5
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fbd7 	bl	800021c <__divsi3>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000a76:	4940      	ldr	r1, [pc, #256]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a78:	4840      	ldr	r0, [pc, #256]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f002 fe99 	bl	80037b4 <HAL_UART_Transmit>
}
 8000a82:	e072      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
		else if(rx2_data=='4')
 8000a84:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b34      	cmp	r3, #52	; 0x34
 8000a8a:	d115      	bne.n	8000ab8 <HAL_UART_RxCpltCallback+0xf0>
			int freq = 5000;		//Duty ON:OFF = 10:90
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <HAL_UART_RxCpltCallback+0x1b8>)
 8000a8e:	60fb      	str	r3, [r7, #12]
			TIM3->ARR = freq-1;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1e5a      	subs	r2, r3, #1
 8000a94:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/10-1;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	210a      	movs	r1, #10
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff fbbd 	bl	800021c <__divsi3>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000aaa:	4933      	ldr	r1, [pc, #204]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000aac:	4833      	ldr	r0, [pc, #204]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 8000aae:	230a      	movs	r3, #10
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f002 fe7f 	bl	80037b4 <HAL_UART_Transmit>
}
 8000ab6:	e058      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
		else if(rx2_data=='5')
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b35      	cmp	r3, #53	; 0x35
 8000abe:	d114      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x122>
			freq = 16666;		//40Hz = 5000, 12Hz = 16666, 10Hz = 20000, 8Hz = 25000
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <HAL_UART_RxCpltCallback+0x1c0>)
 8000ac2:	617b      	str	r3, [r7, #20]
			TIM3->ARR = freq-1;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	1e5a      	subs	r2, r3, #1
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/2-1;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	da00      	bge.n	8000ad4 <HAL_UART_RxCpltCallback+0x10c>
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	105b      	asrs	r3, r3, #1
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000adc:	4926      	ldr	r1, [pc, #152]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000ade:	4827      	ldr	r0, [pc, #156]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f002 fe66 	bl	80037b4 <HAL_UART_Transmit>
}
 8000ae8:	e03f      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
		else if(rx2_data=='6')
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b36      	cmp	r3, #54	; 0x36
 8000af0:	d114      	bne.n	8000b1c <HAL_UART_RxCpltCallback+0x154>
			freq = 20000;		//40Hz = 5000, 12Hz = 16666, 10Hz = 20000, 8Hz = 25000
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_UART_RxCpltCallback+0x1c4>)
 8000af4:	617b      	str	r3, [r7, #20]
			TIM3->ARR = freq-1;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/2-1;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	da00      	bge.n	8000b06 <HAL_UART_RxCpltCallback+0x13e>
 8000b04:	3301      	adds	r3, #1
 8000b06:	105b      	asrs	r3, r3, #1
 8000b08:	1e5a      	subs	r2, r3, #1
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000b0e:	491a      	ldr	r1, [pc, #104]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000b10:	481a      	ldr	r0, [pc, #104]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 8000b12:	230a      	movs	r3, #10
 8000b14:	2201      	movs	r2, #1
 8000b16:	f002 fe4d 	bl	80037b4 <HAL_UART_Transmit>
}
 8000b1a:	e026      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
		else if(rx2_data=='7')
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b37      	cmp	r3, #55	; 0x37
 8000b22:	d114      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x186>
			freq = 25000;		//40Hz = 5000, 12Hz = 16666, 10Hz = 20000, 8Hz = 25000
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_UART_RxCpltCallback+0x1c8>)
 8000b26:	617b      	str	r3, [r7, #20]
			TIM3->ARR = freq-1;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	1e5a      	subs	r2, r3, #1
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/2-1;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da00      	bge.n	8000b38 <HAL_UART_RxCpltCallback+0x170>
 8000b36:	3301      	adds	r3, #1
 8000b38:	105b      	asrs	r3, r3, #1
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_UART_Transmit(&huart2, &rx2_data, 1, 10);
 8000b40:	490d      	ldr	r1, [pc, #52]	; (8000b78 <HAL_UART_RxCpltCallback+0x1b0>)
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <HAL_UART_RxCpltCallback+0x1b4>)
 8000b44:	230a      	movs	r3, #10
 8000b46:	2201      	movs	r2, #1
 8000b48:	f002 fe34 	bl	80037b4 <HAL_UART_Transmit>
}
 8000b4c:	e00d      	b.n	8000b6a <HAL_UART_RxCpltCallback+0x1a2>
			int freq = 5000;		//40Hz = 5000, 12Hz = 16666, 10Hz = 20000, 8Hz = 25000
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_UART_RxCpltCallback+0x1b8>)
 8000b50:	613b      	str	r3, [r7, #16]
			TIM3->ARR = freq-1;
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR1 = freq/2-1;
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da00      	bge.n	8000b62 <HAL_UART_RxCpltCallback+0x19a>
 8000b60:	3301      	adds	r3, #1
 8000b62:	105b      	asrs	r3, r3, #1
 8000b64:	1e5a      	subs	r2, r3, #1
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <HAL_UART_RxCpltCallback+0x1bc>)
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b006      	add	sp, #24
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40004400 	.word	0x40004400
 8000b78:	200000a0 	.word	0x200000a0
 8000b7c:	2000017c 	.word	0x2000017c
 8000b80:	00001388 	.word	0x00001388
 8000b84:	40000400 	.word	0x40000400
 8000b88:	0000411a 	.word	0x0000411a
 8000b8c:	00004e20 	.word	0x00004e20
 8000b90:	000061a8 	.word	0x000061a8

08000b94 <delay_us>:
void delay_us(uint16_t time) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	1dbb      	adds	r3, r7, #6
 8000b9e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);              // ???��머�?? 0?���? 초기?��
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <delay_us+0x30>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time);   // ?��?��?�� ?��간까�? ??�?
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <delay_us+0x30>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb0:	1dbb      	adds	r3, r7, #6
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f8      	bcc.n	8000baa <delay_us+0x16>
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	200000a8 	.word	0x200000a8

08000bc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	  {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	0002      	movs	r2, r0
 8000bd0:	1dbb      	adds	r3, r7, #6
 8000bd2:	801a      	strh	r2, [r3, #0]
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000bd4:	2390      	movs	r3, #144	; 0x90
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2120      	movs	r1, #32
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 ff80 	bl	8001ae2 <HAL_GPIO_WritePin>
	  }
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}

08000bea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_MspInit+0x44>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x44>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x44>)
 8000c14:	69da      	ldr	r2, [r3, #28]
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_MspInit+0x44>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0549      	lsls	r1, r1, #21
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	61da      	str	r2, [r3, #28]
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_MspInit+0x44>)
 8000c22:	69da      	ldr	r2, [r3, #28]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	055b      	lsls	r3, r3, #21
 8000c28:	4013      	ands	r3, r2
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40021000 	.word	0x40021000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 fb10 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 ff54 	bl	8001b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fce1 	bl	800164a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000138 	.word	0x20000138

08000c94 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 fe44 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	200000a8 	.word	0x200000a8

08000cac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <TIM3_IRQHandler+0x14>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 fe38 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	200000f0 	.word	0x200000f0

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <USART2_IRQHandler+0x14>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f002 fe7c 	bl	80039c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	2000017c 	.word	0x2000017c

08000cdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b096      	sub	sp, #88	; 0x58
 8000cec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	2348      	movs	r3, #72	; 0x48
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f003 fefd 	bl	8004af8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfe:	2340      	movs	r3, #64	; 0x40
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	0018      	movs	r0, r3
 8000d04:	2308      	movs	r3, #8
 8000d06:	001a      	movs	r2, r3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	f003 fef5 	bl	8004af8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0e:	2324      	movs	r3, #36	; 0x24
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	0018      	movs	r0, r3
 8000d14:	231c      	movs	r3, #28
 8000d16:	001a      	movs	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f003 feed 	bl	8004af8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	0018      	movs	r0, r3
 8000d22:	2320      	movs	r3, #32
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f003 fee6 	bl	8004af8 <memset>

  htim1.Instance = TIM1;
 8000d2c:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d2e:	4a45      	ldr	r2, [pc, #276]	; (8000e44 <MX_TIM1_Init+0x15c>)
 8000d30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d34:	222f      	movs	r2, #47	; 0x2f
 8000d36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d3e:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d40:	4a41      	ldr	r2, [pc, #260]	; (8000e48 <MX_TIM1_Init+0x160>)
 8000d42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d56:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 fb6d 	bl	8002438 <HAL_TIM_Base_Init>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000d62:	f7ff ff42 	bl	8000bea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	2148      	movs	r1, #72	; 0x48
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	0152      	lsls	r2, r2, #5
 8000d6e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d70:	187a      	adds	r2, r7, r1
 8000d72:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d74:	0011      	movs	r1, r2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 f80a 	bl	8002d90 <HAL_TIM_ConfigClockSource>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000d80:	f7ff ff33 	bl	8000bea <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f001 fc0a 	bl	80025a0 <HAL_TIM_OC_Init>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000d90:	f7ff ff2b 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da2:	187a      	adds	r2, r7, r1
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fbef 	bl	800358c <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000db2:	f7ff ff1a 	bl	8000bea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000db6:	2124      	movs	r1, #36	; 0x24
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de2:	1879      	adds	r1, r7, r1
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	0018      	movs	r0, r3
 8000dea:	f001 feb3 	bl	8002b54 <HAL_TIM_OC_ConfigChannel>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000df2:	f7ff fefa 	bl	8000bea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	0192      	lsls	r2, r2, #6
 8000e1a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e22:	1d3a      	adds	r2, r7, #4
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_TIM1_Init+0x158>)
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 fc01 	bl	8003630 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000e32:	f7ff feda 	bl	8000bea <Error_Handler>
  }

}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b016      	add	sp, #88	; 0x58
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	200000a8 	.word	0x200000a8
 8000e44:	40012c00 	.word	0x40012c00
 8000e48:	0000ffff 	.word	0x0000ffff

08000e4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e52:	2320      	movs	r3, #32
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	0018      	movs	r0, r3
 8000e58:	2308      	movs	r3, #8
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f003 fe4b 	bl	8004af8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	0018      	movs	r0, r3
 8000e66:	231c      	movs	r3, #28
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f003 fe44 	bl	8004af8 <memset>

  htim3.Instance = TIM3;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000e72:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <MX_TIM3_Init+0xbc>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24-1;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000e78:	2217      	movs	r2, #23
 8000e7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000e84:	2231      	movs	r2, #49	; 0x31
 8000e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 fbda 	bl	8002650 <HAL_TIM_PWM_Init>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ea0:	f7ff fea3 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb2:	187a      	adds	r2, r7, r1
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f002 fb67 	bl	800358c <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000ec2:	f7ff fe92 	bl	8000bea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2260      	movs	r2, #96	; 0x60
 8000eca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25-1;
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2218      	movs	r2, #24
 8000ed0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ede:	1d39      	adds	r1, r7, #4
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f001 fe8d 	bl	8002c04 <HAL_TIM_PWM_ConfigChannel>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000eee:	f7ff fe7c 	bl	8000bea <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <MX_TIM3_Init+0xb8>)
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 f881 	bl	8000ffc <HAL_TIM_MspPostInit>

}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b00a      	add	sp, #40	; 0x28
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	200000f0 	.word	0x200000f0
 8000f08:	40000400 	.word	0x40000400

08000f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d115      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_TIM_Base_MspInit+0x4c>)
 8000f20:	699a      	ldr	r2, [r3, #24]
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_TIM_Base_MspInit+0x4c>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0109      	lsls	r1, r1, #4
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_Base_MspInit+0x4c>)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200d      	movs	r0, #13
 8000f40:	f000 fa8c 	bl	800145c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000f44:	200d      	movs	r0, #13
 8000f46:	f000 fa9e 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <HAL_TIM_PWM_MspInit+0x90>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d139      	bne.n	8000fe2 <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x94>)
 8000f70:	69da      	ldr	r2, [r3, #28]
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x94>)
 8000f74:	2102      	movs	r1, #2
 8000f76:	430a      	orrs	r2, r1
 8000f78:	61da      	str	r2, [r3, #28]
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x94>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x9c>)
 8000f8a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000f8e:	2210      	movs	r2, #16
 8000f90:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	0052      	lsls	r2, r2, #1
 8000fa4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	00d2      	lsls	r2, r2, #3
 8000fac:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f000 fa7f 	bl	80014c0 <HAL_DMA_Init>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000fc6:	f7ff fe10 	bl	8000bea <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fda:	639a      	str	r2, [r3, #56]	; 0x38
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x98>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	20000138 	.word	0x20000138
 8000ff8:	40020044 	.word	0x40020044

08000ffc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	240c      	movs	r4, #12
 8001006:	193b      	adds	r3, r7, r4
 8001008:	0018      	movs	r0, r3
 800100a:	2314      	movs	r3, #20
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f003 fd72 	bl	8004af8 <memset>
  if(timHandle->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_TIM_MspPostInit+0x74>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d124      	bne.n	8001068 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_TIM_MspPostInit+0x78>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_TIM_MspPostInit+0x78>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0289      	lsls	r1, r1, #10
 8001028:	430a      	orrs	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_TIM_MspPostInit+0x78>)
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800103a:	0021      	movs	r1, r4
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2240      	movs	r2, #64	; 0x40
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2202      	movs	r2, #2
 8001046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2201      	movs	r2, #1
 8001058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	187a      	adds	r2, r7, r1
 800105c:	2390      	movs	r3, #144	; 0x90
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	0011      	movs	r1, r2
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fbb0 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b009      	add	sp, #36	; 0x24
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	40000400 	.word	0x40000400
 8001074:	40021000 	.word	0x40021000

08001078 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <MX_USART2_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001084:	2296      	movs	r2, #150	; 0x96
 8001086:	0192      	lsls	r2, r2, #6
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 fb25 	bl	800370c <HAL_UART_Init>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f7ff fd90 	bl	8000bea <Error_Handler>
  }

}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000017c 	.word	0x2000017c
 80010d4:	40004400 	.word	0x40004400

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	2414      	movs	r4, #20
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	0018      	movs	r0, r3
 80010e6:	2314      	movs	r3, #20
 80010e8:	001a      	movs	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	f003 fd04 	bl	8004af8 <memset>
  if(uartHandle->Instance==USART2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_UART_MspInit+0x90>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d132      	bne.n	8001160 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_UART_MspInit+0x94>)
 80010fc:	69da      	ldr	r2, [r3, #28]
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_UART_MspInit+0x94>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0289      	lsls	r1, r1, #10
 8001104:	430a      	orrs	r2, r1
 8001106:	61da      	str	r2, [r3, #28]
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_UART_MspInit+0x94>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0x94>)
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_UART_MspInit+0x94>)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	0289      	lsls	r1, r1, #10
 8001120:	430a      	orrs	r2, r1
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0x94>)
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001132:	0021      	movs	r1, r4
 8001134:	187b      	adds	r3, r7, r1
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2202      	movs	r2, #2
 800113e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2203      	movs	r2, #3
 800114a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2201      	movs	r2, #1
 8001150:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	187a      	adds	r2, r7, r1
 8001154:	2390      	movs	r3, #144	; 0x90
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	0011      	movs	r1, r2
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fb34 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b00b      	add	sp, #44	; 0x2c
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	40004400 	.word	0x40004400
 800116c:	40021000 	.word	0x40021000

08001170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001172:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <LoopForever+0x6>)
    LDR R1, [R0]
 8001176:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001178:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <LoopForever+0xa>)
    CMP R1, R2
 800117c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800117e:	d105      	bne.n	800118c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001180:	4812      	ldr	r0, [pc, #72]	; (80011cc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001182:	4913      	ldr	r1, [pc, #76]	; (80011d0 <LoopForever+0x12>)
    STR R1, [R0]
 8001184:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001188:	4913      	ldr	r1, [pc, #76]	; (80011d8 <LoopForever+0x1a>)
    STR R1, [R0]
 800118a:	6001      	str	r1, [r0, #0]

0800118c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	4813      	ldr	r0, [pc, #76]	; (80011dc <LoopForever+0x1e>)
  ldr r1, =_edata
 800118e:	4914      	ldr	r1, [pc, #80]	; (80011e0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <LoopForever+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80011a4:	4c11      	ldr	r4, [pc, #68]	; (80011ec <LoopForever+0x2e>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011b2:	f7ff fd93 	bl	8000cdc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011b6:	f003 fca7 	bl	8004b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff fb37 	bl	800082c <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80011c4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80011c8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80011cc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80011d0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80011d4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80011d8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011e4:	08004ba8 	.word	0x08004ba8
  ldr r2, =_sbss
 80011e8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011ec:	20000204 	.word	0x20000204

080011f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_IRQHandler>
	...

080011f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_Init+0x24>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_Init+0x24>)
 80011fe:	2110      	movs	r1, #16
 8001200:	430a      	orrs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f809 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120a:	f7ff fcf3 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_InitTick+0x5c>)
 8001226:	681c      	ldr	r4, [r3, #0]
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <HAL_InitTick+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	0019      	movs	r1, r3
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	0098      	lsls	r0, r3, #2
 8001232:	f7fe ff69 	bl	8000108 <__udivsi3>
 8001236:	0003      	movs	r3, r0
 8001238:	0019      	movs	r1, r3
 800123a:	0020      	movs	r0, r4
 800123c:	f7fe ff64 	bl	8000108 <__udivsi3>
 8001240:	0003      	movs	r3, r0
 8001242:	0018      	movs	r0, r3
 8001244:	f000 f92f 	bl	80014a6 <HAL_SYSTICK_Config>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d001      	beq.n	8001250 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e00f      	b.n	8001270 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d80b      	bhi.n	800126e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2301      	movs	r3, #1
 800125a:	425b      	negs	r3, r3
 800125c:	2200      	movs	r2, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f000 f8fc 	bl	800145c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_InitTick+0x64>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b003      	add	sp, #12
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	20000070 	.word	0x20000070
 800127c:	20000078 	.word	0x20000078
 8001280:	20000074 	.word	0x20000074

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	18d2      	adds	r2, r2, r3
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_IncTick+0x20>)
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000078 	.word	0x20000078
 80012a4:	20000200 	.word	0x20000200

080012a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000200 	.word	0x20000200

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	001a      	movs	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	189b      	adds	r3, r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	f7ff ffe0 	bl	80012a8 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	20000078 	.word	0x20000078

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	0002      	movs	r2, r0
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b7f      	cmp	r3, #127	; 0x7f
 8001316:	d809      	bhi.n	800132c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	001a      	movs	r2, r3
 800131e:	231f      	movs	r3, #31
 8001320:	401a      	ands	r2, r3
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_EnableIRQ+0x30>)
 8001324:	2101      	movs	r1, #1
 8001326:	4091      	lsls	r1, r2
 8001328:	000a      	movs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
  }
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	0002      	movs	r2, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b7f      	cmp	r3, #127	; 0x7f
 800134c:	d828      	bhi.n	80013a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134e:	4a2f      	ldr	r2, [pc, #188]	; (800140c <__NVIC_SetPriority+0xd4>)
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	33c0      	adds	r3, #192	; 0xc0
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	589b      	ldr	r3, [r3, r2]
 800135e:	1dfa      	adds	r2, r7, #7
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	0011      	movs	r1, r2
 8001364:	2203      	movs	r2, #3
 8001366:	400a      	ands	r2, r1
 8001368:	00d2      	lsls	r2, r2, #3
 800136a:	21ff      	movs	r1, #255	; 0xff
 800136c:	4091      	lsls	r1, r2
 800136e:	000a      	movs	r2, r1
 8001370:	43d2      	mvns	r2, r2
 8001372:	401a      	ands	r2, r3
 8001374:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	019b      	lsls	r3, r3, #6
 800137a:	22ff      	movs	r2, #255	; 0xff
 800137c:	401a      	ands	r2, r3
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	0018      	movs	r0, r3
 8001384:	2303      	movs	r3, #3
 8001386:	4003      	ands	r3, r0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <__NVIC_SetPriority+0xd4>)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b25b      	sxtb	r3, r3
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	430a      	orrs	r2, r1
 8001398:	33c0      	adds	r3, #192	; 0xc0
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800139e:	e031      	b.n	8001404 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <__NVIC_SetPriority+0xd8>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0019      	movs	r1, r3
 80013a8:	230f      	movs	r3, #15
 80013aa:	400b      	ands	r3, r1
 80013ac:	3b08      	subs	r3, #8
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3306      	adds	r3, #6
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	3304      	adds	r3, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1dfa      	adds	r2, r7, #7
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	0011      	movs	r1, r2
 80013c0:	2203      	movs	r2, #3
 80013c2:	400a      	ands	r2, r1
 80013c4:	00d2      	lsls	r2, r2, #3
 80013c6:	21ff      	movs	r1, #255	; 0xff
 80013c8:	4091      	lsls	r1, r2
 80013ca:	000a      	movs	r2, r1
 80013cc:	43d2      	mvns	r2, r2
 80013ce:	401a      	ands	r2, r3
 80013d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	019b      	lsls	r3, r3, #6
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	401a      	ands	r2, r3
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	0018      	movs	r0, r3
 80013e0:	2303      	movs	r3, #3
 80013e2:	4003      	ands	r3, r0
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <__NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	001c      	movs	r4, r3
 80013f0:	230f      	movs	r3, #15
 80013f2:	4023      	ands	r3, r4
 80013f4:	3b08      	subs	r3, #8
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	430a      	orrs	r2, r1
 80013fa:	3306      	adds	r3, #6
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	18c3      	adds	r3, r0, r3
 8001400:	3304      	adds	r3, #4
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b003      	add	sp, #12
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	045b      	lsls	r3, r3, #17
 8001424:	429a      	cmp	r2, r3
 8001426:	d301      	bcc.n	800142c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001428:	2301      	movs	r3, #1
 800142a:	e010      	b.n	800144e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <SysTick_Config+0x44>)
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	3a01      	subs	r2, #1
 8001432:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001434:	2301      	movs	r3, #1
 8001436:	425b      	negs	r3, r3
 8001438:	2103      	movs	r1, #3
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff ff7c 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x44>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x44>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	210f      	movs	r1, #15
 8001468:	187b      	adds	r3, r7, r1
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	187b      	adds	r3, r7, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	0011      	movs	r1, r2
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	0002      	movs	r2, r0
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b25b      	sxtb	r3, r3
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff ff33 	bl	8001304 <__NVIC_EnableIRQ>
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ffaf 	bl	8001414 <SysTick_Config>
 80014b6:	0003      	movs	r3, r0
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e036      	b.n	8001544 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2221      	movs	r2, #33	; 0x21
 80014da:	2102      	movs	r1, #2
 80014dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_DMA_Init+0x8c>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	0018      	movs	r0, r3
 8001528:	f000 f932 	bl	8001790 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2221      	movs	r2, #33	; 0x21
 8001536:	2101      	movs	r1, #1
 8001538:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	2100      	movs	r1, #0
 8001540:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}  
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b004      	add	sp, #16
 800154a:	bd80      	pop	{r7, pc}
 800154c:	ffffc00f 	.word	0xffffc00f

08001550 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2221      	movs	r2, #33	; 0x21
 800155c:	5c9b      	ldrb	r3, [r3, r2]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2204      	movs	r2, #4
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e020      	b.n	80015b8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	210e      	movs	r1, #14
 8001582:	438a      	bics	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	438a      	bics	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	2101      	movs	r1, #1
 80015a0:	4091      	lsls	r1, r2
 80015a2:	000a      	movs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2221      	movs	r2, #33	; 0x21
 80015aa:	2101      	movs	r1, #1
 80015ac:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	210f      	movs	r1, #15
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2221      	movs	r2, #33	; 0x21
 80015d4:	5c9b      	ldrb	r3, [r3, r2]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d006      	beq.n	80015ea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2204      	movs	r2, #4
 80015e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e028      	b.n	800163c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	210e      	movs	r1, #14
 80015f6:	438a      	bics	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	438a      	bics	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	2101      	movs	r1, #1
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2221      	movs	r2, #33	; 0x21
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	0010      	movs	r0, r2
 800163a:	4798      	blx	r3
    } 
  }
  return status;
 800163c:	230f      	movs	r3, #15
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	781b      	ldrb	r3, [r3, #0]
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b004      	add	sp, #16
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2204      	movs	r2, #4
 8001668:	409a      	lsls	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	d024      	beq.n	80016bc <HAL_DMA_IRQHandler+0x72>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2204      	movs	r2, #4
 8001676:	4013      	ands	r3, r2
 8001678:	d020      	beq.n	80016bc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2220      	movs	r2, #32
 8001682:	4013      	ands	r3, r2
 8001684:	d107      	bne.n	8001696 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2104      	movs	r1, #4
 8001692:	438a      	bics	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	2104      	movs	r1, #4
 80016a0:	4091      	lsls	r1, r2
 80016a2:	000a      	movs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d100      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x66>
 80016ae:	e06a      	b.n	8001786 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	0010      	movs	r0, r2
 80016b8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80016ba:	e064      	b.n	8001786 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2202      	movs	r2, #2
 80016c2:	409a      	lsls	r2, r3
 80016c4:	0013      	movs	r3, r2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	d02b      	beq.n	8001724 <HAL_DMA_IRQHandler+0xda>
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2202      	movs	r2, #2
 80016d0:	4013      	ands	r3, r2
 80016d2:	d027      	beq.n	8001724 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2220      	movs	r2, #32
 80016dc:	4013      	ands	r3, r2
 80016de:	d10b      	bne.n	80016f8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	210a      	movs	r1, #10
 80016ec:	438a      	bics	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2221      	movs	r2, #33	; 0x21
 80016f4:	2101      	movs	r1, #1
 80016f6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001700:	2102      	movs	r1, #2
 8001702:	4091      	lsls	r1, r2
 8001704:	000a      	movs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2220      	movs	r2, #32
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	d036      	beq.n	8001786 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	0010      	movs	r0, r2
 8001720:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001722:	e030      	b.n	8001786 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2208      	movs	r2, #8
 800172a:	409a      	lsls	r2, r3
 800172c:	0013      	movs	r3, r2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	d028      	beq.n	8001786 <HAL_DMA_IRQHandler+0x13c>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2208      	movs	r2, #8
 8001738:	4013      	ands	r3, r2
 800173a:	d024      	beq.n	8001786 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	210e      	movs	r1, #14
 8001748:	438a      	bics	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001754:	2101      	movs	r1, #1
 8001756:	4091      	lsls	r1, r2
 8001758:	000a      	movs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2221      	movs	r2, #33	; 0x21
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	0010      	movs	r0, r2
 8001782:	4798      	blx	r3
    }
   }
}  
 8001784:	e7ff      	b.n	8001786 <HAL_DMA_IRQHandler+0x13c>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <DMA_CalcBaseAndBitshift+0x30>)
 800179e:	4694      	mov	ip, r2
 80017a0:	4463      	add	r3, ip
 80017a2:	2114      	movs	r1, #20
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7fe fcaf 	bl	8000108 <__udivsi3>
 80017aa:	0003      	movs	r3, r0
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <DMA_CalcBaseAndBitshift+0x34>)
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	bffdfff8 	.word	0xbffdfff8
 80017c4:	40020000 	.word	0x40020000

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e14f      	b.n	8001a78 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2101      	movs	r1, #1
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4091      	lsls	r1, r2
 80017e2:	000a      	movs	r2, r1
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d100      	bne.n	80017f0 <HAL_GPIO_Init+0x28>
 80017ee:	e140      	b.n	8001a72 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2203      	movs	r2, #3
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d005      	beq.n	8001808 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2203      	movs	r2, #3
 8001802:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001804:	2b02      	cmp	r3, #2
 8001806:	d130      	bne.n	800186a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	409a      	lsls	r2, r3
 8001816:	0013      	movs	r3, r2
 8001818:	43da      	mvns	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	0013      	movs	r3, r2
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183e:	2201      	movs	r2, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	2201      	movs	r2, #1
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	4013      	ands	r3, r2
 8001872:	2b03      	cmp	r3, #3
 8001874:	d017      	beq.n	80018a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d123      	bne.n	80018fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	58d3      	ldr	r3, [r2, r3]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2207      	movs	r2, #7
 80018c4:	4013      	ands	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	43da      	mvns	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2107      	movs	r1, #7
 80018de:	400b      	ands	r3, r1
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	409a      	lsls	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	6939      	ldr	r1, [r7, #16]
 80018f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2203      	movs	r2, #3
 8001918:	401a      	ands	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	23c0      	movs	r3, #192	; 0xc0
 8001934:	029b      	lsls	r3, r3, #10
 8001936:	4013      	ands	r3, r2
 8001938:	d100      	bne.n	800193c <HAL_GPIO_Init+0x174>
 800193a:	e09a      	b.n	8001a72 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193c:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <HAL_GPIO_Init+0x2c8>)
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_GPIO_Init+0x2c8>)
 8001942:	2101      	movs	r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x2c8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001954:	4a4f      	ldr	r2, [pc, #316]	; (8001a94 <HAL_GPIO_Init+0x2cc>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	589b      	ldr	r3, [r3, r2]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	409a      	lsls	r2, r3
 800196e:	0013      	movs	r3, r2
 8001970:	43da      	mvns	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	2390      	movs	r3, #144	; 0x90
 800197c:	05db      	lsls	r3, r3, #23
 800197e:	429a      	cmp	r2, r3
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x1e2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a44      	ldr	r2, [pc, #272]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x1de>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a43      	ldr	r2, [pc, #268]	; (8001a9c <HAL_GPIO_Init+0x2d4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x1da>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <HAL_GPIO_Init+0x2d8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x1d6>
 800199a:	2303      	movs	r3, #3
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x1e4>
 800199e:	2305      	movs	r3, #5
 80019a0:	e004      	b.n	80019ac <HAL_GPIO_Init+0x1e4>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_Init+0x1e4>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x1e4>
 80019aa:	2300      	movs	r3, #0
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	2103      	movs	r1, #3
 80019b0:	400a      	ands	r2, r1
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	4093      	lsls	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019bc:	4935      	ldr	r1, [pc, #212]	; (8001a94 <HAL_GPIO_Init+0x2cc>)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ca:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43da      	mvns	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	4013      	ands	r3, r2
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43da      	mvns	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	029b      	lsls	r3, r3, #10
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	035b      	lsls	r3, r3, #13
 8001a36:	4013      	ands	r3, r2
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43da      	mvns	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	039b      	lsls	r3, r3, #14
 8001a60:	4013      	ands	r3, r2
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_GPIO_Init+0x2dc>)
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	40da      	lsrs	r2, r3
 8001a80:	1e13      	subs	r3, r2, #0
 8001a82:	d000      	beq.n	8001a86 <HAL_GPIO_Init+0x2be>
 8001a84:	e6a8      	b.n	80017d8 <HAL_GPIO_Init+0x10>
  } 
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b006      	add	sp, #24
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	48000c00 	.word	0x48000c00
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	1cbb      	adds	r3, r7, #2
 8001ab4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	1cba      	adds	r2, r7, #2
 8001abc:	8812      	ldrh	r2, [r2, #0]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001acc:	230f      	movs	r3, #15
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
  }
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b004      	add	sp, #16
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	0008      	movs	r0, r1
 8001aec:	0011      	movs	r1, r2
 8001aee:	1cbb      	adds	r3, r7, #2
 8001af0:	1c02      	adds	r2, r0, #0
 8001af2:	801a      	strh	r2, [r3, #0]
 8001af4:	1c7b      	adds	r3, r7, #1
 8001af6:	1c0a      	adds	r2, r1, #0
 8001af8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afa:	1c7b      	adds	r3, r7, #1
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b02:	1cbb      	adds	r3, r7, #2
 8001b04:	881a      	ldrh	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b0a:	e003      	b.n	8001b14 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0c:	1cbb      	adds	r3, r7, #2
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	0002      	movs	r2, r0
 8001b24:	1dbb      	adds	r3, r7, #6
 8001b26:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	1dba      	adds	r2, r7, #6
 8001b2e:	8812      	ldrh	r2, [r2, #0]
 8001b30:	4013      	ands	r3, r2
 8001b32:	d008      	beq.n	8001b46 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b36:	1dba      	adds	r2, r7, #6
 8001b38:	8812      	ldrh	r2, [r2, #0]
 8001b3a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b3c:	1dbb      	adds	r3, r7, #6
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff f841 	bl	8000bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e305      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1e>
 8001b70:	e08d      	b.n	8001c8e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b72:	4bc5      	ldr	r3, [pc, #788]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	220c      	movs	r2, #12
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d00e      	beq.n	8001b9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b7e:	4bc2      	ldr	r3, [pc, #776]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	220c      	movs	r2, #12
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d116      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x64>
 8001b8a:	4bbf      	ldr	r3, [pc, #764]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	025b      	lsls	r3, r3, #9
 8001b92:	401a      	ands	r2, r3
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10d      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	4bba      	ldr	r3, [pc, #744]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_OscConfig+0x56>
 8001ba8:	e070      	b.n	8001c8c <HAL_RCC_OscConfig+0x138>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d000      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x60>
 8001bb2:	e06b      	b.n	8001c8c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e2dc      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x7c>
 8001bc0:	4bb1      	ldr	r3, [pc, #708]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4bb0      	ldr	r3, [pc, #704]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0249      	lsls	r1, r1, #9
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e02f      	b.n	8001c30 <HAL_RCC_OscConfig+0xdc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x9e>
 8001bd8:	4bab      	ldr	r3, [pc, #684]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4baa      	ldr	r3, [pc, #680]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001bde:	49ab      	ldr	r1, [pc, #684]	; (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4ba8      	ldr	r3, [pc, #672]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4ba7      	ldr	r3, [pc, #668]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001bea:	49a9      	ldr	r1, [pc, #676]	; (8001e90 <HAL_RCC_OscConfig+0x33c>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e01e      	b.n	8001c30 <HAL_RCC_OscConfig+0xdc>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10e      	bne.n	8001c18 <HAL_RCC_OscConfig+0xc4>
 8001bfa:	4ba3      	ldr	r3, [pc, #652]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4ba2      	ldr	r3, [pc, #648]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	02c9      	lsls	r1, r1, #11
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4b9f      	ldr	r3, [pc, #636]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b9e      	ldr	r3, [pc, #632]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	0249      	lsls	r1, r1, #9
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xdc>
 8001c18:	4b9b      	ldr	r3, [pc, #620]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b9a      	ldr	r3, [pc, #616]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c1e:	499b      	ldr	r1, [pc, #620]	; (8001e8c <HAL_RCC_OscConfig+0x338>)
 8001c20:	400a      	ands	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	4b98      	ldr	r3, [pc, #608]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b97      	ldr	r3, [pc, #604]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c2a:	4999      	ldr	r1, [pc, #612]	; (8001e90 <HAL_RCC_OscConfig+0x33c>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d014      	beq.n	8001c62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb36 	bl	80012a8 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c42:	f7ff fb31 	bl	80012a8 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e28e      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c54:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0xee>
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb21 	bl	80012a8 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fb1c 	bl	80012a8 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e279      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	4013      	ands	r3, r2
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x118>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x146>
 8001c98:	e06c      	b.n	8001d74 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ca4:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d11f      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	23c0      	movs	r3, #192	; 0xc0
 8001cb6:	025b      	lsls	r3, r3, #9
 8001cb8:	401a      	ands	r2, r3
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b71      	ldr	r3, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x184>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e24c      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b6b      	ldr	r3, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22f8      	movs	r2, #248	; 0xf8
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00da      	lsls	r2, r3, #3
 8001ce8:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e041      	b.n	8001d74 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d024      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fad0 	bl	80012a8 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff facb 	bl	80012a8 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e228      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2202      	movs	r2, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d0f1      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	22f8      	movs	r2, #248	; 0xf8
 8001d30:	4393      	bics	r3, r2
 8001d32:	0019      	movs	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	00da      	lsls	r2, r3, #3
 8001d3a:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e018      	b.n	8001d74 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	438a      	bics	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff faab 	bl	80012a8 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff faa6 	bl	80012a8 <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e203      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d1f1      	bne.n	8001d58 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d036      	beq.n	8001dec <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d019      	beq.n	8001dba <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d86:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff fa89 	bl	80012a8 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fa84 	bl	80012a8 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1e1      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0f1      	beq.n	8001d9c <HAL_RCC_OscConfig+0x248>
 8001db8:	e018      	b.n	8001dec <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	438a      	bics	r2, r1
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa6f 	bl	80012a8 <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fa6a 	bl	80012a8 <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1c7      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f1      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d100      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2a4>
 8001df6:	e0b5      	b.n	8001f64 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df8:	201f      	movs	r0, #31
 8001dfa:	183b      	adds	r3, r7, r0
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	055b      	lsls	r3, r3, #21
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d110      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0549      	lsls	r1, r1, #21
 8001e16:	430a      	orrs	r2, r1
 8001e18:	61da      	str	r2, [r3, #28]
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	055b      	lsls	r3, r3, #21
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e28:	183b      	adds	r3, r7, r0
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_OscConfig+0x340>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d11a      	bne.n	8001e70 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_RCC_OscConfig+0x340>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_RCC_OscConfig+0x340>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0049      	lsls	r1, r1, #1
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f7ff fa2e 	bl	80012a8 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fa29 	bl	80012a8 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e186      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x340>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10f      	bne.n	8001e98 <HAL_RCC_OscConfig+0x344>
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <HAL_RCC_OscConfig+0x334>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	430a      	orrs	r2, r1
 8001e82:	621a      	str	r2, [r3, #32]
 8001e84:	e036      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3a0>
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	fffeffff 	.word	0xfffeffff
 8001e90:	fffbffff 	.word	0xfffbffff
 8001e94:	40007000 	.word	0x40007000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x366>
 8001ea0:	4bb6      	ldr	r3, [pc, #728]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	4bb5      	ldr	r3, [pc, #724]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	621a      	str	r2, [r3, #32]
 8001eac:	4bb3      	ldr	r3, [pc, #716]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	4bb2      	ldr	r3, [pc, #712]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	621a      	str	r2, [r3, #32]
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3a0>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x388>
 8001ec2:	4bae      	ldr	r3, [pc, #696]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	4bad      	ldr	r3, [pc, #692]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ec8:	2104      	movs	r1, #4
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	621a      	str	r2, [r3, #32]
 8001ece:	4bab      	ldr	r3, [pc, #684]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4baa      	ldr	r3, [pc, #680]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3a0>
 8001edc:	4ba7      	ldr	r3, [pc, #668]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	4ba6      	ldr	r3, [pc, #664]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	621a      	str	r2, [r3, #32]
 8001ee8:	4ba4      	ldr	r3, [pc, #656]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001eee:	2104      	movs	r1, #4
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d014      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7ff f9d4 	bl	80012a8 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	e009      	b.n	8001f1a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f9cf 	bl	80012a8 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4a9b      	ldr	r2, [pc, #620]	; (8002180 <HAL_RCC_OscConfig+0x62c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e12b      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b98      	ldr	r3, [pc, #608]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3b2>
 8001f24:	e013      	b.n	8001f4e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f9bf 	bl	80012a8 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2e:	e009      	b.n	8001f44 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff f9ba 	bl	80012a8 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	4a91      	ldr	r2, [pc, #580]	; (8002180 <HAL_RCC_OscConfig+0x62c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e116      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	4b8d      	ldr	r3, [pc, #564]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4e:	231f      	movs	r3, #31
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	4b87      	ldr	r3, [pc, #540]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f5e:	4989      	ldr	r1, [pc, #548]	; (8002184 <HAL_RCC_OscConfig+0x630>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12a      	bne.n	8001fcc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f76:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	4b80      	ldr	r3, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f82:	4b7e      	ldr	r3, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f86:	4b7d      	ldr	r3, [pc, #500]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001f88:	2101      	movs	r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f98b 	bl	80012a8 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f98:	f7ff f986 	bl	80012a8 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0e3      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001faa:	4b74      	ldr	r3, [pc, #464]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	2202      	movs	r2, #2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d0f1      	beq.n	8001f98 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fb4:	4b71      	ldr	r3, [pc, #452]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	22f8      	movs	r2, #248	; 0xf8
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	00da      	lsls	r2, r3, #3
 8001fc4:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fca:	e034      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	3305      	adds	r3, #5
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fd4:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd8:	4b68      	ldr	r3, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001fda:	2104      	movs	r1, #4
 8001fdc:	438a      	bics	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	22f8      	movs	r2, #248	; 0xf8
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	00da      	lsls	r2, r3, #3
 8001ff0:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff6:	e01e      	b.n	8002036 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ff8:	4b60      	ldr	r3, [pc, #384]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffc:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8001ffe:	2104      	movs	r1, #4
 8002000:	430a      	orrs	r2, r1
 8002002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002004:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8002006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002008:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_RCC_OscConfig+0x628>)
 800200a:	2101      	movs	r1, #1
 800200c:	438a      	bics	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff f94a 	bl	80012a8 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800201a:	f7ff f945 	bl	80012a8 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0a2      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_OscConfig+0x628>)
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d1f1      	bne.n	800201a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d100      	bne.n	8002040 <HAL_RCC_OscConfig+0x4ec>
 800203e:	e097      	b.n	8002170 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	220c      	movs	r2, #12
 8002046:	4013      	ands	r3, r2
 8002048:	2b08      	cmp	r3, #8
 800204a:	d100      	bne.n	800204e <HAL_RCC_OscConfig+0x4fa>
 800204c:	e06b      	b.n	8002126 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d14c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b49      	ldr	r3, [pc, #292]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_RCC_OscConfig+0x628>)
 800205c:	494a      	ldr	r1, [pc, #296]	; (8002188 <HAL_RCC_OscConfig+0x634>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7ff f921 	bl	80012a8 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f91c 	bl	80012a8 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e079      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	049b      	lsls	r3, r3, #18
 8002086:	4013      	ands	r3, r2
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208a:	4b3c      	ldr	r3, [pc, #240]	; (800217c <HAL_RCC_OscConfig+0x628>)
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	220f      	movs	r2, #15
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_RCC_OscConfig+0x628>)
 800209a:	430a      	orrs	r2, r1
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
 800209e:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_RCC_OscConfig+0x628>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a3a      	ldr	r2, [pc, #232]	; (800218c <HAL_RCC_OscConfig+0x638>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	431a      	orrs	r2, r3
 80020b2:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_RCC_OscConfig+0x628>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b8:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCC_OscConfig+0x628>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_RCC_OscConfig+0x628>)
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	0449      	lsls	r1, r1, #17
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff f8ef 	bl	80012a8 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff f8ea 	bl	80012a8 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e047      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_OscConfig+0x628>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	049b      	lsls	r3, r3, #18
 80020ea:	4013      	ands	r3, r2
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x57c>
 80020ee:	e03f      	b.n	8002170 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_RCC_OscConfig+0x628>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_RCC_OscConfig+0x628>)
 80020f6:	4924      	ldr	r1, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x634>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff f8d4 	bl	80012a8 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff f8cf 	bl	80012a8 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e02c      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_RCC_OscConfig+0x628>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	049b      	lsls	r3, r3, #18
 8002120:	4013      	ands	r3, r2
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x5b2>
 8002124:	e024      	b.n	8002170 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e01f      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_OscConfig+0x628>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_RCC_OscConfig+0x628>)
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	23c0      	movs	r3, #192	; 0xc0
 8002142:	025b      	lsls	r3, r3, #9
 8002144:	401a      	ands	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	429a      	cmp	r2, r3
 800214c:	d10e      	bne.n	800216c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	220f      	movs	r2, #15
 8002152:	401a      	ands	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	23f0      	movs	r3, #240	; 0xf0
 8002160:	039b      	lsls	r3, r3, #14
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b008      	add	sp, #32
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	40021000 	.word	0x40021000
 8002180:	00001388 	.word	0x00001388
 8002184:	efffffff 	.word	0xefffffff
 8002188:	feffffff 	.word	0xfeffffff
 800218c:	ffc27fff 	.word	0xffc27fff

08002190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0b3      	b.n	800230c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d911      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4393      	bics	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	4b55      	ldr	r3, [pc, #340]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e09a      	b.n	800230c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2202      	movs	r2, #2
 80021dc:	4013      	ands	r3, r2
 80021de:	d015      	beq.n	800220c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2204      	movs	r2, #4
 80021e6:	4013      	ands	r3, r2
 80021e8:	d006      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021ea:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 80021f0:	21e0      	movs	r1, #224	; 0xe0
 80021f2:	00c9      	lsls	r1, r1, #3
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	22f0      	movs	r2, #240	; 0xf0
 80021fe:	4393      	bics	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	4b44      	ldr	r3, [pc, #272]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d040      	beq.n	8002298 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	029b      	lsls	r3, r3, #10
 8002226:	4013      	ands	r3, r2
 8002228:	d114      	bne.n	8002254 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06e      	b.n	800230c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	049b      	lsls	r3, r3, #18
 800223e:	4013      	ands	r3, r2
 8002240:	d108      	bne.n	8002254 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e062      	b.n	800230c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e05b      	b.n	800230c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	4393      	bics	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff f81e 	bl	80012a8 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002270:	e009      	b.n	8002286 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002272:	f7ff f819 	bl	80012a8 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_RCC_ClockConfig+0x18c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e042      	b.n	800230c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	220c      	movs	r2, #12
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1ec      	bne.n	8002272 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d211      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4393      	bics	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_RCC_ClockConfig+0x184>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e020      	b.n	800230c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2204      	movs	r2, #4
 80022d0:	4013      	ands	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_RCC_ClockConfig+0x190>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022e8:	f000 f820 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ec:	0001      	movs	r1, r0
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x188>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	220f      	movs	r2, #15
 80022f6:	4013      	ands	r3, r2
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x194>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	000a      	movs	r2, r1
 80022fe:	40da      	lsrs	r2, r3
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x198>)
 8002302:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe ff89 	bl	800121c <HAL_InitTick>
  
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
 800231c:	00001388 	.word	0x00001388
 8002320:	fffff8ff 	.word	0xfffff8ff
 8002324:	08004b88 	.word	0x08004b88
 8002328:	20000070 	.word	0x20000070

0800232c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b08f      	sub	sp, #60	; 0x3c
 8002330:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002332:	2314      	movs	r3, #20
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	4a2c      	ldr	r2, [pc, #176]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002338:	ca13      	ldmia	r2!, {r0, r1, r4}
 800233a:	c313      	stmia	r3!, {r0, r1, r4}
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	4a2a      	ldr	r2, [pc, #168]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002344:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002346:	c313      	stmia	r3!, {r0, r1, r4}
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	220c      	movs	r2, #12
 800236a:	4013      	ands	r3, r2
 800236c:	2b04      	cmp	r3, #4
 800236e:	d002      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x4a>
 8002370:	2b08      	cmp	r3, #8
 8002372:	d003      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x50>
 8002374:	e02f      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800237a:	e02f      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	0c9b      	lsrs	r3, r3, #18
 8002380:	220f      	movs	r2, #15
 8002382:	4013      	ands	r3, r2
 8002384:	2214      	movs	r2, #20
 8002386:	18ba      	adds	r2, r7, r2
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	220f      	movs	r2, #15
 8002392:	4013      	ands	r3, r2
 8002394:	1d3a      	adds	r2, r7, #4
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800239a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239c:	23c0      	movs	r3, #192	; 0xc0
 800239e:	025b      	lsls	r3, r3, #9
 80023a0:	401a      	ands	r2, r3
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	025b      	lsls	r3, r3, #9
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d109      	bne.n	80023be <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ac:	4811      	ldr	r0, [pc, #68]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ae:	f7fd feab 	bl	8000108 <__udivsi3>
 80023b2:	0003      	movs	r3, r0
 80023b4:	001a      	movs	r2, r3
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	4353      	muls	r3, r2
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c2:	f7fd fea1 	bl	8000108 <__udivsi3>
 80023c6:	0003      	movs	r3, r0
 80023c8:	001a      	movs	r2, r3
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	4353      	muls	r3, r2
 80023ce:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80023d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023d4:	e002      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b00f      	add	sp, #60	; 0x3c
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	08004b68 	.word	0x08004b68
 80023ec:	08004b78 	.word	0x08004b78
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b02      	ldr	r3, [pc, #8]	; (8002408 <HAL_RCC_GetHCLKFreq+0x10>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	20000070 	.word	0x20000070

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002410:	f7ff fff2 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002414:	0001      	movs	r1, r0
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	2207      	movs	r2, #7
 800241e:	4013      	ands	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	40d9      	lsrs	r1, r3
 8002426:	000b      	movs	r3, r1
}    
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40021000 	.word	0x40021000
 8002434:	08004b98 	.word	0x08004b98

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e042      	b.n	80024d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	223d      	movs	r2, #61	; 0x3d
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	223c      	movs	r2, #60	; 0x3c
 800245a:	2100      	movs	r1, #0
 800245c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f7fe fd53 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	223d      	movs	r2, #61	; 0x3d
 800246a:	2102      	movs	r1, #2
 800246c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	0019      	movs	r1, r3
 8002478:	0010      	movs	r0, r2
 800247a:	f000 fd7d 	bl	8002f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2246      	movs	r2, #70	; 0x46
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	223e      	movs	r2, #62	; 0x3e
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	223f      	movs	r2, #63	; 0x3f
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2240      	movs	r2, #64	; 0x40
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2241      	movs	r2, #65	; 0x41
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2242      	movs	r2, #66	; 0x42
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2243      	movs	r2, #67	; 0x43
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2244      	movs	r2, #68	; 0x44
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2245      	movs	r2, #69	; 0x45
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223d      	movs	r2, #61	; 0x3d
 80024ca:	2101      	movs	r1, #1
 80024cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	223d      	movs	r2, #61	; 0x3d
 80024e4:	5c9b      	ldrb	r3, [r3, r2]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e028      	b.n	8002542 <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	223d      	movs	r2, #61	; 0x3d
 80024f4:	2102      	movs	r1, #2
 80024f6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <HAL_TIM_Base_Start+0x74>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_TIM_Base_Start+0x34>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_TIM_Base_Start+0x78>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d111      	bne.n	8002530 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2207      	movs	r2, #7
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d010      	beq.n	8002540 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	e007      	b.n	8002540 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40000400 	.word	0x40000400

08002554 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <HAL_TIM_Base_Stop+0x44>)
 8002564:	4013      	ands	r3, r2
 8002566:	d10d      	bne.n	8002584 <HAL_TIM_Base_Stop+0x30>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_TIM_Base_Stop+0x48>)
 8002570:	4013      	ands	r3, r2
 8002572:	d107      	bne.n	8002584 <HAL_TIM_Base_Stop+0x30>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2101      	movs	r1, #1
 8002580:	438a      	bics	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	223d      	movs	r2, #61	; 0x3d
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b002      	add	sp, #8
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	00001111 	.word	0x00001111
 800259c:	00000444 	.word	0x00000444

080025a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e042      	b.n	8002638 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	223d      	movs	r2, #61	; 0x3d
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d107      	bne.n	80025ce <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	223c      	movs	r2, #60	; 0x3c
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f839 	bl	8002640 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	223d      	movs	r2, #61	; 0x3d
 80025d2:	2102      	movs	r1, #2
 80025d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	0019      	movs	r1, r3
 80025e0:	0010      	movs	r0, r2
 80025e2:	f000 fcc9 	bl	8002f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2246      	movs	r2, #70	; 0x46
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	223e      	movs	r2, #62	; 0x3e
 80025f2:	2101      	movs	r1, #1
 80025f4:	5499      	strb	r1, [r3, r2]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	223f      	movs	r2, #63	; 0x3f
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2240      	movs	r2, #64	; 0x40
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2241      	movs	r2, #65	; 0x41
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2242      	movs	r2, #66	; 0x42
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2243      	movs	r2, #67	; 0x43
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2244      	movs	r2, #68	; 0x44
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2245      	movs	r2, #69	; 0x45
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	223d      	movs	r2, #61	; 0x3d
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e042      	b.n	80026e8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223d      	movs	r2, #61	; 0x3d
 8002666:	5c9b      	ldrb	r3, [r3, r2]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d107      	bne.n	800267e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	223c      	movs	r2, #60	; 0x3c
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f7fe fc6f 	bl	8000f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	223d      	movs	r2, #61	; 0x3d
 8002682:	2102      	movs	r1, #2
 8002684:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	0019      	movs	r1, r3
 8002690:	0010      	movs	r0, r2
 8002692:	f000 fc71 	bl	8002f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2246      	movs	r2, #70	; 0x46
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223e      	movs	r2, #62	; 0x3e
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	223f      	movs	r2, #63	; 0x3f
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2240      	movs	r2, #64	; 0x40
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2241      	movs	r2, #65	; 0x41
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2242      	movs	r2, #66	; 0x42
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2243      	movs	r2, #67	; 0x43
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2244      	movs	r2, #68	; 0x44
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2245      	movs	r2, #69	; 0x45
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	223d      	movs	r2, #61	; 0x3d
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d108      	bne.n	8002712 <HAL_TIM_PWM_Start+0x22>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	223e      	movs	r2, #62	; 0x3e
 8002704:	5c9b      	ldrb	r3, [r3, r2]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	4193      	sbcs	r3, r2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e01f      	b.n	8002752 <HAL_TIM_PWM_Start+0x62>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d108      	bne.n	800272a <HAL_TIM_PWM_Start+0x3a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	223f      	movs	r2, #63	; 0x3f
 800271c:	5c9b      	ldrb	r3, [r3, r2]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	1e5a      	subs	r2, r3, #1
 8002724:	4193      	sbcs	r3, r2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	e013      	b.n	8002752 <HAL_TIM_PWM_Start+0x62>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d108      	bne.n	8002742 <HAL_TIM_PWM_Start+0x52>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	5c9b      	ldrb	r3, [r3, r2]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	1e5a      	subs	r2, r3, #1
 800273c:	4193      	sbcs	r3, r2
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e007      	b.n	8002752 <HAL_TIM_PWM_Start+0x62>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2241      	movs	r2, #65	; 0x41
 8002746:	5c9b      	ldrb	r3, [r3, r2]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	4193      	sbcs	r3, r2
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e064      	b.n	8002824 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_TIM_PWM_Start+0x7a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	223e      	movs	r2, #62	; 0x3e
 8002764:	2102      	movs	r1, #2
 8002766:	5499      	strb	r1, [r3, r2]
 8002768:	e013      	b.n	8002792 <HAL_TIM_PWM_Start+0xa2>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d104      	bne.n	800277a <HAL_TIM_PWM_Start+0x8a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	223f      	movs	r2, #63	; 0x3f
 8002774:	2102      	movs	r1, #2
 8002776:	5499      	strb	r1, [r3, r2]
 8002778:	e00b      	b.n	8002792 <HAL_TIM_PWM_Start+0xa2>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d104      	bne.n	800278a <HAL_TIM_PWM_Start+0x9a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	2102      	movs	r1, #2
 8002786:	5499      	strb	r1, [r3, r2]
 8002788:	e003      	b.n	8002792 <HAL_TIM_PWM_Start+0xa2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2241      	movs	r2, #65	; 0x41
 800278e:	2102      	movs	r1, #2
 8002790:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fed2 	bl	8003544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_TIM_PWM_Start+0x13c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIM_PWM_Start+0xce>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a20      	ldr	r2, [pc, #128]	; (8002830 <HAL_TIM_PWM_Start+0x140>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIM_PWM_Start+0xce>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_TIM_PWM_Start+0x144>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_PWM_Start+0xd2>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_TIM_PWM_Start+0xd4>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	0209      	lsls	r1, r1, #8
 80027d6:	430a      	orrs	r2, r1
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_TIM_PWM_Start+0x13c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_TIM_PWM_Start+0xfe>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_TIM_PWM_Start+0x148>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d111      	bne.n	8002812 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2207      	movs	r2, #7
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d010      	beq.n	8002822 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2101      	movs	r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002810:	e007      	b.n	8002822 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800
 8002838:	40000400 	.word	0x40000400

0800283c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	2200      	movs	r2, #0
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fe78 	bl	8003544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2d      	ldr	r2, [pc, #180]	; (8002910 <HAL_TIM_PWM_Stop+0xd4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_TIM_PWM_Stop+0x36>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <HAL_TIM_PWM_Stop+0xd8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIM_PWM_Stop+0x36>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <HAL_TIM_PWM_Stop+0xdc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_TIM_PWM_Stop+0x3a>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_TIM_PWM_Stop+0x3c>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_TIM_PWM_Stop+0xe0>)
 8002884:	4013      	ands	r3, r2
 8002886:	d10d      	bne.n	80028a4 <HAL_TIM_PWM_Stop+0x68>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	4a24      	ldr	r2, [pc, #144]	; (8002920 <HAL_TIM_PWM_Stop+0xe4>)
 8002890:	4013      	ands	r3, r2
 8002892:	d107      	bne.n	80028a4 <HAL_TIM_PWM_Stop+0x68>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4921      	ldr	r1, [pc, #132]	; (8002924 <HAL_TIM_PWM_Stop+0xe8>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_TIM_PWM_Stop+0xe0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	d10d      	bne.n	80028cc <HAL_TIM_PWM_Stop+0x90>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_TIM_PWM_Stop+0xe4>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_PWM_Stop+0x90>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2101      	movs	r1, #1
 80028c8:	438a      	bics	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d104      	bne.n	80028dc <HAL_TIM_PWM_Stop+0xa0>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	223e      	movs	r2, #62	; 0x3e
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]
 80028da:	e013      	b.n	8002904 <HAL_TIM_PWM_Stop+0xc8>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d104      	bne.n	80028ec <HAL_TIM_PWM_Stop+0xb0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223f      	movs	r2, #63	; 0x3f
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]
 80028ea:	e00b      	b.n	8002904 <HAL_TIM_PWM_Stop+0xc8>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d104      	bne.n	80028fc <HAL_TIM_PWM_Stop+0xc0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
 80028fa:	e003      	b.n	8002904 <HAL_TIM_PWM_Stop+0xc8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2241      	movs	r2, #65	; 0x41
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800
 800291c:	00001111 	.word	0x00001111
 8002920:	00000444 	.word	0x00000444
 8002924:	ffff7fff 	.word	0xffff7fff

08002928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2202      	movs	r2, #2
 8002938:	4013      	ands	r3, r2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d124      	bne.n	8002988 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2202      	movs	r2, #2
 8002946:	4013      	ands	r3, r2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11d      	bne.n	8002988 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2203      	movs	r2, #3
 8002952:	4252      	negs	r2, r2
 8002954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2203      	movs	r2, #3
 8002964:	4013      	ands	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	f000 faec 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002970:	e007      	b.n	8002982 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fadf 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 faeb 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2204      	movs	r2, #4
 8002990:	4013      	ands	r3, r2
 8002992:	2b04      	cmp	r3, #4
 8002994:	d125      	bne.n	80029e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2204      	movs	r2, #4
 800299e:	4013      	ands	r3, r2
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d11e      	bne.n	80029e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2205      	movs	r2, #5
 80029aa:	4252      	negs	r2, r2
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 fabf 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 80029ca:	e007      	b.n	80029dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 fab2 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fabe 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2208      	movs	r2, #8
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d124      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2208      	movs	r2, #8
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d11d      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2209      	movs	r2, #9
 8002a04:	4252      	negs	r2, r2
 8002a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2203      	movs	r2, #3
 8002a16:	4013      	ands	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 fa93 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002a22:	e007      	b.n	8002a34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fa86 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fa92 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2210      	movs	r2, #16
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d125      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2210      	movs	r2, #16
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d11e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2211      	movs	r2, #17
 8002a5c:	4252      	negs	r2, r2
 8002a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2208      	movs	r2, #8
 8002a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	23c0      	movs	r3, #192	; 0xc0
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 fa66 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e007      	b.n	8002a8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 fa59 	bl	8002f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 fa65 	bl	8002f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4252      	negs	r2, r2
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7fd ff7a 	bl	80009b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d10f      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d108      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2281      	movs	r2, #129	; 0x81
 8002ae4:	4252      	negs	r2, r2
 8002ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fe06 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d10f      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d108      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2241      	movs	r2, #65	; 0x41
 8002b12:	4252      	negs	r2, r2
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fa25 	bl	8002f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2220      	movs	r2, #32
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d10f      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d108      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2221      	movs	r2, #33	; 0x21
 8002b40:	4252      	negs	r2, r2
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fdd0 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2317      	movs	r3, #23
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	223c      	movs	r2, #60	; 0x3c
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_OC_ConfigChannel+0x22>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e042      	b.n	8002bfc <HAL_TIM_OC_ConfigChannel+0xa8>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	223c      	movs	r2, #60	; 0x3c
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b0c      	cmp	r3, #12
 8002b82:	d027      	beq.n	8002bd4 <HAL_TIM_OC_ConfigChannel+0x80>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d82c      	bhi.n	8002be4 <HAL_TIM_OC_ConfigChannel+0x90>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d019      	beq.n	8002bc4 <HAL_TIM_OC_ConfigChannel+0x70>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d826      	bhi.n	8002be4 <HAL_TIM_OC_ConfigChannel+0x90>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_TIM_OC_ConfigChannel+0x50>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d008      	beq.n	8002bb4 <HAL_TIM_OC_ConfigChannel+0x60>
 8002ba2:	e01f      	b.n	8002be4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	0011      	movs	r1, r2
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fa4f 	bl	8003050 <TIM_OC1_SetConfig>
      break;
 8002bb2:	e01c      	b.n	8002bee <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	0011      	movs	r1, r2
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fac5 	bl	800314c <TIM_OC2_SetConfig>
      break;
 8002bc2:	e014      	b.n	8002bee <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	0011      	movs	r1, r2
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 fb3b 	bl	8003248 <TIM_OC3_SetConfig>
      break;
 8002bd2:	e00c      	b.n	8002bee <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 fbb3 	bl	8003348 <TIM_OC4_SetConfig>
      break;
 8002be2:	e004      	b.n	8002bee <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002be4:	2317      	movs	r3, #23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
      break;
 8002bec:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	223c      	movs	r2, #60	; 0x3c
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

  return status;
 8002bf6:	2317      	movs	r3, #23
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b006      	add	sp, #24
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2317      	movs	r3, #23
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	223c      	movs	r2, #60	; 0x3c
 8002c1c:	5c9b      	ldrb	r3, [r3, r2]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0ad      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	223c      	movs	r2, #60	; 0x3c
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d100      	bne.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c34:	e076      	b.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d900      	bls.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c3c:	e095      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d04e      	beq.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d900      	bls.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c4a:	e08e      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d021      	beq.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c58:	e087      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 f9f4 	bl	8003050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2108      	movs	r1, #8
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2104      	movs	r1, #4
 8002c84:	438a      	bics	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6999      	ldr	r1, [r3, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	619a      	str	r2, [r3, #24]
      break;
 8002c9a:	e06b      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 fa51 	bl	800314c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	0109      	lsls	r1, r1, #4
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4931      	ldr	r1, [pc, #196]	; (8002d8c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002cc8:	400a      	ands	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6999      	ldr	r1, [r3, #24]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	021a      	lsls	r2, r3, #8
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	619a      	str	r2, [r3, #24]
      break;
 8002ce0:	e048      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	0011      	movs	r1, r2
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 faac 	bl	8003248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2108      	movs	r1, #8
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69d9      	ldr	r1, [r3, #28]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	61da      	str	r2, [r3, #28]
      break;
 8002d22:	e027      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 fb0b 	bl	8003348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0109      	lsls	r1, r1, #4
 8002d40:	430a      	orrs	r2, r1
 8002d42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	490f      	ldr	r1, [pc, #60]	; (8002d8c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69d9      	ldr	r1, [r3, #28]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	021a      	lsls	r2, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	61da      	str	r2, [r3, #28]
      break;
 8002d68:	e004      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d6a:	2317      	movs	r3, #23
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
      break;
 8002d72:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	223c      	movs	r2, #60	; 0x3c
 8002d78:	2100      	movs	r1, #0
 8002d7a:	5499      	strb	r1, [r3, r2]

  return status;
 8002d7c:	2317      	movs	r3, #23
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	781b      	ldrb	r3, [r3, #0]
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b006      	add	sp, #24
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	fffffbff 	.word	0xfffffbff

08002d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	230f      	movs	r3, #15
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	223c      	movs	r2, #60	; 0x3c
 8002da6:	5c9b      	ldrb	r3, [r3, r2]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIM_ConfigClockSource+0x20>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0bc      	b.n	8002f2a <HAL_TIM_ConfigClockSource+0x19a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	223c      	movs	r2, #60	; 0x3c
 8002db4:	2101      	movs	r1, #1
 8002db6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	223d      	movs	r2, #61	; 0x3d
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2277      	movs	r2, #119	; 0x77
 8002dcc:	4393      	bics	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	0192      	lsls	r2, r2, #6
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d040      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xde>
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	0192      	lsls	r2, r2, #6
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d900      	bls.n	8002df6 <HAL_TIM_ConfigClockSource+0x66>
 8002df4:	e088      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	0152      	lsls	r2, r2, #5
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d100      	bne.n	8002e00 <HAL_TIM_ConfigClockSource+0x70>
 8002dfe:	e088      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x182>
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	0152      	lsls	r2, r2, #5
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d900      	bls.n	8002e0a <HAL_TIM_ConfigClockSource+0x7a>
 8002e08:	e07e      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002e0a:	2b70      	cmp	r3, #112	; 0x70
 8002e0c:	d018      	beq.n	8002e40 <HAL_TIM_ConfigClockSource+0xb0>
 8002e0e:	d900      	bls.n	8002e12 <HAL_TIM_ConfigClockSource+0x82>
 8002e10:	e07a      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002e12:	2b60      	cmp	r3, #96	; 0x60
 8002e14:	d04f      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x126>
 8002e16:	d900      	bls.n	8002e1a <HAL_TIM_ConfigClockSource+0x8a>
 8002e18:	e076      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002e1a:	2b50      	cmp	r3, #80	; 0x50
 8002e1c:	d03b      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x106>
 8002e1e:	d900      	bls.n	8002e22 <HAL_TIM_ConfigClockSource+0x92>
 8002e20:	e072      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d057      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x146>
 8002e26:	d900      	bls.n	8002e2a <HAL_TIM_ConfigClockSource+0x9a>
 8002e28:	e06e      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002e2a:	2b30      	cmp	r3, #48	; 0x30
 8002e2c:	d063      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x166>
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x166>
 8002e34:	d868      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d05d      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x166>
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d05b      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x166>
 8002e3e:	e063      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6899      	ldr	r1, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f000 fb58 	bl	8003504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2277      	movs	r2, #119	; 0x77
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	609a      	str	r2, [r3, #8]
      break;
 8002e6c:	e052      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f000 fb41 	bl	8003504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	01c9      	lsls	r1, r1, #7
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	f000 fab4 	bl	8003410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	; 0x50
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 fb0e 	bl	80034d0 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	f000 fad2 	bl	800346c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	; 0x60
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fafe 	bl	80034d0 <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	f000 fa94 	bl	8003410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 faee 	bl	80034d0 <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0019      	movs	r1, r3
 8002f00:	0010      	movs	r0, r2
 8002f02:	f000 fae5 	bl	80034d0 <TIM_ITRx_SetConfig>
      break;
 8002f06:	e005      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
      break;
 8002f10:	e000      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f12:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	223d      	movs	r2, #61	; 0x3d
 8002f18:	2101      	movs	r1, #1
 8002f1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223c      	movs	r2, #60	; 0x3c
 8002f20:	2100      	movs	r1, #0
 8002f22:	5499      	strb	r1, [r3, r2]

  return status;
 8002f24:	230f      	movs	r3, #15
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	781b      	ldrb	r3, [r3, #0]
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	ffff00ff 	.word	0xffff00ff

08002f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <TIM_Base_SetConfig+0xc0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x20>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a2a      	ldr	r2, [pc, #168]	; (800303c <TIM_Base_SetConfig+0xc4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2270      	movs	r2, #112	; 0x70
 8002f9c:	4393      	bics	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <TIM_Base_SetConfig+0xc0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00f      	beq.n	8002fd2 <TIM_Base_SetConfig+0x5a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <TIM_Base_SetConfig+0xc4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_Base_SetConfig+0x5a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <TIM_Base_SetConfig+0xc8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0x5a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <TIM_Base_SetConfig+0xcc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0x5a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <TIM_Base_SetConfig+0xd0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	; (800304c <TIM_Base_SetConfig+0xd4>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	4393      	bics	r3, r2
 8002fea:	001a      	movs	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <TIM_Base_SetConfig+0xc0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <TIM_Base_SetConfig+0xaa>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <TIM_Base_SetConfig+0xcc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d003      	beq.n	8003022 <TIM_Base_SetConfig+0xaa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <TIM_Base_SetConfig+0xd0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d103      	bne.n	800302a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	615a      	str	r2, [r3, #20]
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40002000 	.word	0x40002000
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800
 800304c:	fffffcff 	.word	0xfffffcff

08003050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	2201      	movs	r2, #1
 8003060:	4393      	bics	r3, r2
 8003062:	001a      	movs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2270      	movs	r2, #112	; 0x70
 800307e:	4393      	bics	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2203      	movs	r2, #3
 8003086:	4393      	bics	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2202      	movs	r2, #2
 8003098:	4393      	bics	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a23      	ldr	r2, [pc, #140]	; (8003138 <TIM_OC1_SetConfig+0xe8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <TIM_OC1_SetConfig+0x6e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <TIM_OC1_SetConfig+0xec>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_OC1_SetConfig+0x6e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a21      	ldr	r2, [pc, #132]	; (8003140 <TIM_OC1_SetConfig+0xf0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10c      	bne.n	80030d8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2208      	movs	r2, #8
 80030c2:	4393      	bics	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2204      	movs	r2, #4
 80030d4:	4393      	bics	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <TIM_OC1_SetConfig+0xe8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d007      	beq.n	80030f0 <TIM_OC1_SetConfig+0xa0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <TIM_OC1_SetConfig+0xec>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_OC1_SetConfig+0xa0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <TIM_OC1_SetConfig+0xf0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d111      	bne.n	8003114 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4a14      	ldr	r2, [pc, #80]	; (8003144 <TIM_OC1_SetConfig+0xf4>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <TIM_OC1_SetConfig+0xf8>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	621a      	str	r2, [r3, #32]
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b006      	add	sp, #24
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800
 8003144:	fffffeff 	.word	0xfffffeff
 8003148:	fffffdff 	.word	0xfffffdff

0800314c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	2210      	movs	r2, #16
 800315c:	4393      	bics	r3, r2
 800315e:	001a      	movs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a2c      	ldr	r2, [pc, #176]	; (800322c <TIM_OC2_SetConfig+0xe0>)
 800317a:	4013      	ands	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a2b      	ldr	r2, [pc, #172]	; (8003230 <TIM_OC2_SetConfig+0xe4>)
 8003182:	4013      	ands	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2220      	movs	r2, #32
 8003196:	4393      	bics	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a22      	ldr	r2, [pc, #136]	; (8003234 <TIM_OC2_SetConfig+0xe8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10d      	bne.n	80031ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	4393      	bics	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	4393      	bics	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <TIM_OC2_SetConfig+0xe8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_OC2_SetConfig+0x96>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <TIM_OC2_SetConfig+0xec>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_OC2_SetConfig+0x96>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a17      	ldr	r2, [pc, #92]	; (800323c <TIM_OC2_SetConfig+0xf0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d113      	bne.n	800320a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4a16      	ldr	r2, [pc, #88]	; (8003240 <TIM_OC2_SetConfig+0xf4>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4a15      	ldr	r2, [pc, #84]	; (8003244 <TIM_OC2_SetConfig+0xf8>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	621a      	str	r2, [r3, #32]
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b006      	add	sp, #24
 800322a:	bd80      	pop	{r7, pc}
 800322c:	ffff8fff 	.word	0xffff8fff
 8003230:	fffffcff 	.word	0xfffffcff
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800
 8003240:	fffffbff 	.word	0xfffffbff
 8003244:	fffff7ff 	.word	0xfffff7ff

08003248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a33      	ldr	r2, [pc, #204]	; (8003324 <TIM_OC3_SetConfig+0xdc>)
 8003258:	401a      	ands	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2270      	movs	r2, #112	; 0x70
 8003274:	4393      	bics	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2203      	movs	r2, #3
 800327c:	4393      	bics	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <TIM_OC3_SetConfig+0xe0>)
 800328e:	4013      	ands	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <TIM_OC3_SetConfig+0xe4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10d      	bne.n	80032c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4a21      	ldr	r2, [pc, #132]	; (8003330 <TIM_OC3_SetConfig+0xe8>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <TIM_OC3_SetConfig+0xec>)
 80032be:	4013      	ands	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <TIM_OC3_SetConfig+0xe4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_OC3_SetConfig+0x92>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <TIM_OC3_SetConfig+0xf0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_OC3_SetConfig+0x92>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <TIM_OC3_SetConfig+0xf4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <TIM_OC3_SetConfig+0xf8>)
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <TIM_OC3_SetConfig+0xfc>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b006      	add	sp, #24
 8003322:	bd80      	pop	{r7, pc}
 8003324:	fffffeff 	.word	0xfffffeff
 8003328:	fffffdff 	.word	0xfffffdff
 800332c:	40012c00 	.word	0x40012c00
 8003330:	fffff7ff 	.word	0xfffff7ff
 8003334:	fffffbff 	.word	0xfffffbff
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800
 8003340:	ffffefff 	.word	0xffffefff
 8003344:	ffffdfff 	.word	0xffffdfff

08003348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <TIM_OC4_SetConfig+0xa8>)
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <TIM_OC4_SetConfig+0xac>)
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <TIM_OC4_SetConfig+0xb0>)
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <TIM_OC4_SetConfig+0xb4>)
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	031b      	lsls	r3, r3, #12
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a17      	ldr	r2, [pc, #92]	; (8003400 <TIM_OC4_SetConfig+0xb8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <TIM_OC4_SetConfig+0x70>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a16      	ldr	r2, [pc, #88]	; (8003404 <TIM_OC4_SetConfig+0xbc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_OC4_SetConfig+0x70>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <TIM_OC4_SetConfig+0xc0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d109      	bne.n	80033cc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4a14      	ldr	r2, [pc, #80]	; (800340c <TIM_OC4_SetConfig+0xc4>)
 80033bc:	4013      	ands	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	019b      	lsls	r3, r3, #6
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b006      	add	sp, #24
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	ffffefff 	.word	0xffffefff
 80033f4:	ffff8fff 	.word	0xffff8fff
 80033f8:	fffffcff 	.word	0xfffffcff
 80033fc:	ffffdfff 	.word	0xffffdfff
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800
 800340c:	ffffbfff 	.word	0xffffbfff

08003410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	2201      	movs	r2, #1
 8003428:	4393      	bics	r3, r2
 800342a:	001a      	movs	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	22f0      	movs	r2, #240	; 0xf0
 800343a:	4393      	bics	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	220a      	movs	r2, #10
 800344c:	4393      	bics	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b006      	add	sp, #24
 800346a:	bd80      	pop	{r7, pc}

0800346c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	2210      	movs	r2, #16
 800347e:	4393      	bics	r3, r2
 8003480:	001a      	movs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	4a0d      	ldr	r2, [pc, #52]	; (80034cc <TIM_TI2_ConfigInputStage+0x60>)
 8003496:	4013      	ands	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	22a0      	movs	r2, #160	; 0xa0
 80034a8:	4393      	bics	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	621a      	str	r2, [r3, #32]
}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b006      	add	sp, #24
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	ffff0fff 	.word	0xffff0fff

080034d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2270      	movs	r2, #112	; 0x70
 80034e4:	4393      	bics	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	2207      	movs	r2, #7
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	609a      	str	r2, [r3, #8]
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b004      	add	sp, #16
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <TIM_ETR_SetConfig+0x3c>)
 800351c:	4013      	ands	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	021a      	lsls	r2, r3, #8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	431a      	orrs	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b006      	add	sp, #24
 800353e:	bd80      	pop	{r7, pc}
 8003540:	ffff00ff 	.word	0xffff00ff

08003544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	221f      	movs	r2, #31
 8003554:	4013      	ands	r3, r2
 8003556:	2201      	movs	r2, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	0013      	movs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	43d2      	mvns	r2, r2
 8003566:	401a      	ands	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	211f      	movs	r1, #31
 8003574:	400b      	ands	r3, r1
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4099      	lsls	r1, r3
 800357a:	000b      	movs	r3, r1
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b006      	add	sp, #24
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	223c      	movs	r2, #60	; 0x3c
 800359a:	5c9b      	ldrb	r3, [r3, r2]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e03c      	b.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	223c      	movs	r2, #60	; 0x3c
 80035a8:	2101      	movs	r1, #1
 80035aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	223d      	movs	r2, #61	; 0x3d
 80035b0:	2102      	movs	r1, #2
 80035b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2270      	movs	r2, #112	; 0x70
 80035c8:	4393      	bics	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0f      	ldr	r2, [pc, #60]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10c      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	4393      	bics	r3, r2
 80035f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4313      	orrs	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	223d      	movs	r2, #61	; 0x3d
 8003610:	2101      	movs	r1, #1
 8003612:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	223c      	movs	r2, #60	; 0x3c
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400

08003630 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	223c      	movs	r2, #60	; 0x3c
 8003642:	5c9b      	ldrb	r3, [r3, r2]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003648:	2302      	movs	r3, #2
 800364a:	e03e      	b.n	80036ca <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	223c      	movs	r2, #60	; 0x3c
 8003650:	2101      	movs	r1, #1
 8003652:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	22ff      	movs	r2, #255	; 0xff
 8003658:	4393      	bics	r3, r2
 800365a:	001a      	movs	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003668:	401a      	ands	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003676:	401a      	ands	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003684:	401a      	ands	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003692:	401a      	ands	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80036a0:	401a      	ands	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80036ae:	401a      	ands	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	223c      	movs	r2, #60	; 0x3c
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b004      	add	sp, #16
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	fffffcff 	.word	0xfffffcff
 80036d8:	fffffbff 	.word	0xfffffbff
 80036dc:	fffff7ff 	.word	0xfffff7ff
 80036e0:	ffffefff 	.word	0xffffefff
 80036e4:	ffffdfff 	.word	0xffffdfff
 80036e8:	ffffbfff 	.word	0xffffbfff

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e044      	b.n	80037a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2274      	movs	r2, #116	; 0x74
 800372a:	2100      	movs	r1, #0
 800372c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f7fd fcd1 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2224      	movs	r2, #36	; 0x24
 800373a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 fc16 	bl	8003f80 <UART_SetConfig>
 8003754:	0003      	movs	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e024      	b.n	80037a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fd49 	bl	8004200 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	490d      	ldr	r1, [pc, #52]	; (80037b0 <HAL_UART_Init+0xa4>)
 800377a:	400a      	ands	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2108      	movs	r1, #8
 800378a:	438a      	bics	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fde1 	bl	8004368 <UART_CheckIdleState>
 80037a6:	0003      	movs	r3, r0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	fffff7ff 	.word	0xfffff7ff

080037b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d000      	beq.n	80037ce <HAL_UART_Transmit+0x1a>
 80037cc:	e096      	b.n	80038fc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_UART_Transmit+0x28>
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e08e      	b.n	80038fe <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	015b      	lsls	r3, r3, #5
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d109      	bne.n	8003800 <HAL_UART_Transmit+0x4c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2201      	movs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	d001      	beq.n	8003800 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e07e      	b.n	80038fe <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2274      	movs	r2, #116	; 0x74
 8003804:	5c9b      	ldrb	r3, [r3, r2]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Transmit+0x5a>
 800380a:	2302      	movs	r3, #2
 800380c:	e077      	b.n	80038fe <HAL_UART_Transmit+0x14a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2274      	movs	r2, #116	; 0x74
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	2100      	movs	r1, #0
 800381c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2221      	movs	r2, #33	; 0x21
 8003822:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003824:	f7fd fd40 	bl	80012a8 <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1dba      	adds	r2, r7, #6
 8003830:	2150      	movs	r1, #80	; 0x50
 8003832:	8812      	ldrh	r2, [r2, #0]
 8003834:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1dba      	adds	r2, r7, #6
 800383a:	2152      	movs	r1, #82	; 0x52
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	015b      	lsls	r3, r3, #5
 8003848:	429a      	cmp	r2, r3
 800384a:	d108      	bne.n	800385e <HAL_UART_Transmit+0xaa>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e003      	b.n	8003866 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2274      	movs	r2, #116	; 0x74
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800386e:	e02d      	b.n	80038cc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	0013      	movs	r3, r2
 800387a:	2200      	movs	r2, #0
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	f000 fdbb 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e039      	b.n	80038fe <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	05d2      	lsls	r2, r2, #23
 800389a:	0dd2      	lsrs	r2, r2, #23
 800389c:	b292      	uxth	r2, r2
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	3302      	adds	r3, #2
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e008      	b.n	80038ba <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b292      	uxth	r2, r2
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	3301      	adds	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2252      	movs	r2, #82	; 0x52
 80038be:	5a9b      	ldrh	r3, [r3, r2]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b299      	uxth	r1, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2252      	movs	r2, #82	; 0x52
 80038ca:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2252      	movs	r2, #82	; 0x52
 80038d0:	5a9b      	ldrh	r3, [r3, r2]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1cb      	bne.n	8003870 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	0013      	movs	r3, r2
 80038e2:	2200      	movs	r2, #0
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	f000 fd87 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e005      	b.n	80038fe <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b008      	add	sp, #32
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b088      	sub	sp, #32
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	1dbb      	adds	r3, r7, #6
 8003912:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	2b20      	cmp	r3, #32
 800391a:	d150      	bne.n	80039be <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_UART_Receive_IT+0x24>
 8003922:	1dbb      	adds	r3, r7, #6
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e048      	b.n	80039c0 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	015b      	lsls	r3, r3, #5
 8003936:	429a      	cmp	r2, r3
 8003938:	d109      	bne.n	800394e <HAL_UART_Receive_IT+0x48>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2201      	movs	r2, #1
 8003946:	4013      	ands	r3, r2
 8003948:	d001      	beq.n	800394e <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e038      	b.n	80039c0 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2274      	movs	r2, #116	; 0x74
 8003952:	5c9b      	ldrb	r3, [r3, r2]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_UART_Receive_IT+0x56>
 8003958:	2302      	movs	r3, #2
 800395a:	e031      	b.n	80039c0 <HAL_UART_Receive_IT+0xba>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2274      	movs	r2, #116	; 0x74
 8003960:	2101      	movs	r1, #1
 8003962:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	4013      	ands	r3, r2
 8003976:	d019      	beq.n	80039ac <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	613b      	str	r3, [r7, #16]
  return(result);
 800397e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	2301      	movs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	04c9      	lsls	r1, r1, #19
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039ac:	1dbb      	adds	r3, r7, #6
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 fde3 	bl	8004580 <UART_Start_Receive_IT>
 80039ba:	0003      	movs	r3, r0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b008      	add	sp, #32
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b0ab      	sub	sp, #172	; 0xac
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	22a4      	movs	r2, #164	; 0xa4
 80039d8:	18b9      	adds	r1, r7, r2
 80039da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	20a0      	movs	r0, #160	; 0xa0
 80039e4:	1839      	adds	r1, r7, r0
 80039e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	219c      	movs	r1, #156	; 0x9c
 80039f0:	1879      	adds	r1, r7, r1
 80039f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039f4:	0011      	movs	r1, r2
 80039f6:	18bb      	adds	r3, r7, r2
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a99      	ldr	r2, [pc, #612]	; (8003c60 <HAL_UART_IRQHandler+0x298>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	2298      	movs	r2, #152	; 0x98
 8003a00:	18bc      	adds	r4, r7, r2
 8003a02:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003a04:	18bb      	adds	r3, r7, r2
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d114      	bne.n	8003a36 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2220      	movs	r2, #32
 8003a12:	4013      	ands	r3, r2
 8003a14:	d00f      	beq.n	8003a36 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a16:	183b      	adds	r3, r7, r0
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d00a      	beq.n	8003a36 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d100      	bne.n	8003a2a <HAL_UART_IRQHandler+0x62>
 8003a28:	e27e      	b.n	8003f28 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	0010      	movs	r0, r2
 8003a32:	4798      	blx	r3
      }
      return;
 8003a34:	e278      	b.n	8003f28 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a36:	2398      	movs	r3, #152	; 0x98
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d100      	bne.n	8003a42 <HAL_UART_IRQHandler+0x7a>
 8003a40:	e114      	b.n	8003c6c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a42:	239c      	movs	r3, #156	; 0x9c
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d106      	bne.n	8003a5c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a4e:	23a0      	movs	r3, #160	; 0xa0
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a83      	ldr	r2, [pc, #524]	; (8003c64 <HAL_UART_IRQHandler+0x29c>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	d100      	bne.n	8003a5c <HAL_UART_IRQHandler+0x94>
 8003a5a:	e107      	b.n	8003c6c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a5c:	23a4      	movs	r3, #164	; 0xa4
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2201      	movs	r2, #1
 8003a64:	4013      	ands	r3, r2
 8003a66:	d012      	beq.n	8003a8e <HAL_UART_IRQHandler+0xc6>
 8003a68:	23a0      	movs	r3, #160	; 0xa0
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	589b      	ldr	r3, [r3, r2]
 8003a84:	2201      	movs	r2, #1
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a8e:	23a4      	movs	r3, #164	; 0xa4
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2202      	movs	r2, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	d011      	beq.n	8003abe <HAL_UART_IRQHandler+0xf6>
 8003a9a:	239c      	movs	r3, #156	; 0x9c
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	589b      	ldr	r3, [r3, r2]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003abe:	23a4      	movs	r3, #164	; 0xa4
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d011      	beq.n	8003aee <HAL_UART_IRQHandler+0x126>
 8003aca:	239c      	movs	r3, #156	; 0x9c
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2204      	movs	r2, #4
 8003adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	589b      	ldr	r3, [r3, r2]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2180      	movs	r1, #128	; 0x80
 8003aec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003aee:	23a4      	movs	r3, #164	; 0xa4
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2208      	movs	r2, #8
 8003af6:	4013      	ands	r3, r2
 8003af8:	d017      	beq.n	8003b2a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003afa:	23a0      	movs	r3, #160	; 0xa0
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2220      	movs	r2, #32
 8003b02:	4013      	ands	r3, r2
 8003b04:	d105      	bne.n	8003b12 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b06:	239c      	movs	r3, #156	; 0x9c
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b10:	d00b      	beq.n	8003b2a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2208      	movs	r2, #8
 8003b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	589b      	ldr	r3, [r3, r2]
 8003b20:	2208      	movs	r2, #8
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b2a:	23a4      	movs	r3, #164	; 0xa4
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4013      	ands	r3, r2
 8003b36:	d013      	beq.n	8003b60 <HAL_UART_IRQHandler+0x198>
 8003b38:	23a0      	movs	r3, #160	; 0xa0
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	04db      	lsls	r3, r3, #19
 8003b42:	4013      	ands	r3, r2
 8003b44:	d00c      	beq.n	8003b60 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	0112      	lsls	r2, r2, #4
 8003b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	589b      	ldr	r3, [r3, r2]
 8003b56:	2220      	movs	r2, #32
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2180      	movs	r1, #128	; 0x80
 8003b5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	589b      	ldr	r3, [r3, r2]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d100      	bne.n	8003b6c <HAL_UART_IRQHandler+0x1a4>
 8003b6a:	e1df      	b.n	8003f2c <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b6c:	23a4      	movs	r3, #164	; 0xa4
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2220      	movs	r2, #32
 8003b74:	4013      	ands	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b78:	23a0      	movs	r3, #160	; 0xa0
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	4013      	ands	r3, r2
 8003b82:	d008      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	0010      	movs	r0, r2
 8003b94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	589b      	ldr	r3, [r3, r2]
 8003b9c:	2194      	movs	r1, #148	; 0x94
 8003b9e:	187a      	adds	r2, r7, r1
 8003ba0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d004      	beq.n	8003bba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2228      	movs	r2, #40	; 0x28
 8003bb6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb8:	d047      	beq.n	8003c4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f000 fd8f 	bl	80046e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2240      	movs	r2, #64	; 0x40
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d137      	bne.n	8003c40 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd8:	2090      	movs	r0, #144	; 0x90
 8003bda:	183a      	adds	r2, r7, r0
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	2301      	movs	r3, #1
 8003be0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	438a      	bics	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	183b      	adds	r3, r7, r0
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a14      	ldr	r2, [pc, #80]	; (8003c68 <HAL_UART_IRQHandler+0x2a0>)
 8003c16:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7fd fccf 	bl	80015c0 <HAL_DMA_Abort_IT>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d01a      	beq.n	8003c5c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	0018      	movs	r0, r3
 8003c32:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e012      	b.n	8003c5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f98d 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3e:	e00d      	b.n	8003c5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f988 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e008      	b.n	8003c5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 f983 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	2100      	movs	r1, #0
 8003c58:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c5a:	e167      	b.n	8003f2c <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	46c0      	nop			; (mov r8, r8)
    return;
 8003c5e:	e165      	b.n	8003f2c <HAL_UART_IRQHandler+0x564>
 8003c60:	0000080f 	.word	0x0000080f
 8003c64:	04000120 	.word	0x04000120
 8003c68:	080047a5 	.word	0x080047a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d000      	beq.n	8003c76 <HAL_UART_IRQHandler+0x2ae>
 8003c74:	e131      	b.n	8003eda <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c76:	23a4      	movs	r3, #164	; 0xa4
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d100      	bne.n	8003c84 <HAL_UART_IRQHandler+0x2bc>
 8003c82:	e12a      	b.n	8003eda <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c84:	23a0      	movs	r3, #160	; 0xa0
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d100      	bne.n	8003c92 <HAL_UART_IRQHandler+0x2ca>
 8003c90:	e123      	b.n	8003eda <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2210      	movs	r2, #16
 8003c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2240      	movs	r2, #64	; 0x40
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d000      	beq.n	8003caa <HAL_UART_IRQHandler+0x2e2>
 8003ca8:	e09b      	b.n	8003de2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	217e      	movs	r1, #126	; 0x7e
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d100      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x2fa>
 8003cc0:	e136      	b.n	8003f30 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2258      	movs	r2, #88	; 0x58
 8003cc6:	5a9b      	ldrh	r3, [r3, r2]
 8003cc8:	187a      	adds	r2, r7, r1
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d300      	bcc.n	8003cd2 <HAL_UART_IRQHandler+0x30a>
 8003cd0:	e12e      	b.n	8003f30 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	187a      	adds	r2, r7, r1
 8003cd6:	215a      	movs	r1, #90	; 0x5a
 8003cd8:	8812      	ldrh	r2, [r2, #0]
 8003cda:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d06e      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cee:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	f383 8810 	msr	PRIMASK, r3
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	498e      	ldr	r1, [pc, #568]	; (8003f40 <HAL_UART_IRQHandler+0x578>)
 8003d08:	400a      	ands	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	f383 8810 	msr	PRIMASK, r3
}
 8003d16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d18:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d20:	677b      	str	r3, [r7, #116]	; 0x74
 8003d22:	2301      	movs	r3, #1
 8003d24:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	438a      	bics	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
 8003d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	673b      	str	r3, [r7, #112]	; 0x70
 8003d54:	2301      	movs	r3, #1
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5a:	f383 8810 	msr	PRIMASK, r3
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2140      	movs	r1, #64	; 0x40
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d72:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d76:	f383 8810 	msr	PRIMASK, r3
}
 8003d7a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d88:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d92:	2301      	movs	r3, #1
 8003d94:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2110      	movs	r1, #16
 8003daa:	438a      	bics	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fd fbc6 	bl	8001550 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2258      	movs	r2, #88	; 0x58
 8003dc8:	5a9a      	ldrh	r2, [r3, r2]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	215a      	movs	r1, #90	; 0x5a
 8003dce:	5a5b      	ldrh	r3, [r3, r1]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f000 f8c4 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003de0:	e0a6      	b.n	8003f30 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2258      	movs	r2, #88	; 0x58
 8003de6:	5a99      	ldrh	r1, [r3, r2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	225a      	movs	r2, #90	; 0x5a
 8003dec:	5a9b      	ldrh	r3, [r3, r2]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	208e      	movs	r0, #142	; 0x8e
 8003df2:	183b      	adds	r3, r7, r0
 8003df4:	1a8a      	subs	r2, r1, r2
 8003df6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	225a      	movs	r2, #90	; 0x5a
 8003dfc:	5a9b      	ldrh	r3, [r3, r2]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d100      	bne.n	8003e06 <HAL_UART_IRQHandler+0x43e>
 8003e04:	e096      	b.n	8003f34 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8003e06:	183b      	adds	r3, r7, r0
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d100      	bne.n	8003e10 <HAL_UART_IRQHandler+0x448>
 8003e0e:	e091      	b.n	8003f34 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e16:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e18:	2488      	movs	r4, #136	; 0x88
 8003e1a:	193a      	adds	r2, r7, r4
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	2301      	movs	r3, #1
 8003e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4943      	ldr	r1, [pc, #268]	; (8003f44 <HAL_UART_IRQHandler+0x57c>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f383 8810 	msr	PRIMASK, r3
}
 8003e46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e4e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	2484      	movs	r4, #132	; 0x84
 8003e52:	193a      	adds	r2, r7, r4
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	2301      	movs	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f383 8810 	msr	PRIMASK, r3
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	438a      	bics	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	193b      	adds	r3, r7, r4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f383 8810 	msr	PRIMASK, r3
}
 8003e7e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e92:	f3ef 8310 	mrs	r3, PRIMASK
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9a:	2480      	movs	r4, #128	; 0x80
 8003e9c:	193a      	adds	r2, r7, r4
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	f383 8810 	msr	PRIMASK, r3
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2110      	movs	r1, #16
 8003eb8:	438a      	bics	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	193b      	adds	r3, r7, r4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eca:	183b      	adds	r3, r7, r0
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	0011      	movs	r1, r2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 f848 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ed8:	e02c      	b.n	8003f34 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003eda:	23a4      	movs	r3, #164	; 0xa4
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2280      	movs	r2, #128	; 0x80
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01e      	beq.n	8003f38 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	0010      	movs	r0, r2
 8003f02:	4798      	blx	r3
    }
    return;
 8003f04:	e018      	b.n	8003f38 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f06:	23a4      	movs	r3, #164	; 0xa4
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2240      	movs	r2, #64	; 0x40
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_UART_IRQHandler+0x572>
 8003f12:	23a0      	movs	r3, #160	; 0xa0
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2240      	movs	r2, #64	; 0x40
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d00d      	beq.n	8003f3a <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 fc56 	bl	80047d2 <UART_EndTransmit_IT>
    return;
 8003f26:	e008      	b.n	8003f3a <HAL_UART_IRQHandler+0x572>
      return;
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	e006      	b.n	8003f3a <HAL_UART_IRQHandler+0x572>
    return;
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	e004      	b.n	8003f3a <HAL_UART_IRQHandler+0x572>
      return;
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	e002      	b.n	8003f3a <HAL_UART_IRQHandler+0x572>
      return;
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	e000      	b.n	8003f3a <HAL_UART_IRQHandler+0x572>
    return;
 8003f38:	46c0      	nop			; (mov r8, r8)
  }

}
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b02b      	add	sp, #172	; 0xac
 8003f3e:	bd90      	pop	{r4, r7, pc}
 8003f40:	fffffeff 	.word	0xfffffeff
 8003f44:	fffffedf 	.word	0xfffffedf

08003f48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	000a      	movs	r2, r1
 8003f72:	1cbb      	adds	r3, r7, #2
 8003f74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b002      	add	sp, #8
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f88:	231e      	movs	r3, #30
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a8d      	ldr	r2, [pc, #564]	; (80041e4 <UART_SetConfig+0x264>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a88      	ldr	r2, [pc, #544]	; (80041e8 <UART_SetConfig+0x268>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a7f      	ldr	r2, [pc, #508]	; (80041ec <UART_SetConfig+0x26c>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a7b      	ldr	r2, [pc, #492]	; (80041f0 <UART_SetConfig+0x270>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d127      	bne.n	8004056 <UART_SetConfig+0xd6>
 8004006:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <UART_SetConfig+0x274>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	2203      	movs	r2, #3
 800400c:	4013      	ands	r3, r2
 800400e:	2b03      	cmp	r3, #3
 8004010:	d00d      	beq.n	800402e <UART_SetConfig+0xae>
 8004012:	d81b      	bhi.n	800404c <UART_SetConfig+0xcc>
 8004014:	2b02      	cmp	r3, #2
 8004016:	d014      	beq.n	8004042 <UART_SetConfig+0xc2>
 8004018:	d818      	bhi.n	800404c <UART_SetConfig+0xcc>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <UART_SetConfig+0xa4>
 800401e:	2b01      	cmp	r3, #1
 8004020:	d00a      	beq.n	8004038 <UART_SetConfig+0xb8>
 8004022:	e013      	b.n	800404c <UART_SetConfig+0xcc>
 8004024:	231f      	movs	r3, #31
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e021      	b.n	8004072 <UART_SetConfig+0xf2>
 800402e:	231f      	movs	r3, #31
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	2202      	movs	r2, #2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e01c      	b.n	8004072 <UART_SetConfig+0xf2>
 8004038:	231f      	movs	r3, #31
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2204      	movs	r2, #4
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e017      	b.n	8004072 <UART_SetConfig+0xf2>
 8004042:	231f      	movs	r3, #31
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2208      	movs	r2, #8
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e012      	b.n	8004072 <UART_SetConfig+0xf2>
 800404c:	231f      	movs	r3, #31
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2210      	movs	r2, #16
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e00d      	b.n	8004072 <UART_SetConfig+0xf2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a67      	ldr	r2, [pc, #412]	; (80041f8 <UART_SetConfig+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d104      	bne.n	800406a <UART_SetConfig+0xea>
 8004060:	231f      	movs	r3, #31
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e003      	b.n	8004072 <UART_SetConfig+0xf2>
 800406a:	231f      	movs	r3, #31
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	2210      	movs	r2, #16
 8004070:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	429a      	cmp	r2, r3
 800407c:	d15d      	bne.n	800413a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800407e:	231f      	movs	r3, #31
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b08      	cmp	r3, #8
 8004086:	d015      	beq.n	80040b4 <UART_SetConfig+0x134>
 8004088:	dc18      	bgt.n	80040bc <UART_SetConfig+0x13c>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d00d      	beq.n	80040aa <UART_SetConfig+0x12a>
 800408e:	dc15      	bgt.n	80040bc <UART_SetConfig+0x13c>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <UART_SetConfig+0x11a>
 8004094:	2b02      	cmp	r3, #2
 8004096:	d005      	beq.n	80040a4 <UART_SetConfig+0x124>
 8004098:	e010      	b.n	80040bc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409a:	f7fe f9b7 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 800409e:	0003      	movs	r3, r0
 80040a0:	61bb      	str	r3, [r7, #24]
        break;
 80040a2:	e012      	b.n	80040ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a4:	4b55      	ldr	r3, [pc, #340]	; (80041fc <UART_SetConfig+0x27c>)
 80040a6:	61bb      	str	r3, [r7, #24]
        break;
 80040a8:	e00f      	b.n	80040ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040aa:	f7fe f93f 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80040ae:	0003      	movs	r3, r0
 80040b0:	61bb      	str	r3, [r7, #24]
        break;
 80040b2:	e00a      	b.n	80040ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	61bb      	str	r3, [r7, #24]
        break;
 80040ba:	e006      	b.n	80040ca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040c0:	231e      	movs	r3, #30
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]
        break;
 80040c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d100      	bne.n	80040d2 <UART_SetConfig+0x152>
 80040d0:	e07b      	b.n	80041ca <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	005a      	lsls	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	18d2      	adds	r2, r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	0019      	movs	r1, r3
 80040e4:	0010      	movs	r0, r2
 80040e6:	f7fc f80f 	bl	8000108 <__udivsi3>
 80040ea:	0003      	movs	r3, r0
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d91c      	bls.n	8004130 <UART_SetConfig+0x1b0>
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	025b      	lsls	r3, r3, #9
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d217      	bcs.n	8004130 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	b29a      	uxth	r2, r3
 8004104:	200e      	movs	r0, #14
 8004106:	183b      	adds	r3, r7, r0
 8004108:	210f      	movs	r1, #15
 800410a:	438a      	bics	r2, r1
 800410c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	2207      	movs	r2, #7
 8004116:	4013      	ands	r3, r2
 8004118:	b299      	uxth	r1, r3
 800411a:	183b      	adds	r3, r7, r0
 800411c:	183a      	adds	r2, r7, r0
 800411e:	8812      	ldrh	r2, [r2, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	183a      	adds	r2, r7, r0
 800412a:	8812      	ldrh	r2, [r2, #0]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	e04c      	b.n	80041ca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004130:	231e      	movs	r3, #30
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e047      	b.n	80041ca <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800413a:	231f      	movs	r3, #31
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d015      	beq.n	8004170 <UART_SetConfig+0x1f0>
 8004144:	dc18      	bgt.n	8004178 <UART_SetConfig+0x1f8>
 8004146:	2b04      	cmp	r3, #4
 8004148:	d00d      	beq.n	8004166 <UART_SetConfig+0x1e6>
 800414a:	dc15      	bgt.n	8004178 <UART_SetConfig+0x1f8>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <UART_SetConfig+0x1d6>
 8004150:	2b02      	cmp	r3, #2
 8004152:	d005      	beq.n	8004160 <UART_SetConfig+0x1e0>
 8004154:	e010      	b.n	8004178 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004156:	f7fe f959 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 800415a:	0003      	movs	r3, r0
 800415c:	61bb      	str	r3, [r7, #24]
        break;
 800415e:	e012      	b.n	8004186 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b26      	ldr	r3, [pc, #152]	; (80041fc <UART_SetConfig+0x27c>)
 8004162:	61bb      	str	r3, [r7, #24]
        break;
 8004164:	e00f      	b.n	8004186 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fe f8e1 	bl	800232c <HAL_RCC_GetSysClockFreq>
 800416a:	0003      	movs	r3, r0
 800416c:	61bb      	str	r3, [r7, #24]
        break;
 800416e:	e00a      	b.n	8004186 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	61bb      	str	r3, [r7, #24]
        break;
 8004176:	e006      	b.n	8004186 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800417c:	231e      	movs	r3, #30
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
        break;
 8004184:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01e      	beq.n	80041ca <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	085a      	lsrs	r2, r3, #1
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	18d2      	adds	r2, r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	0019      	movs	r1, r3
 800419c:	0010      	movs	r0, r2
 800419e:	f7fb ffb3 	bl	8000108 <__udivsi3>
 80041a2:	0003      	movs	r3, r0
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b0f      	cmp	r3, #15
 80041ac:	d909      	bls.n	80041c2 <UART_SetConfig+0x242>
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	025b      	lsls	r3, r3, #9
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d204      	bcs.n	80041c2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e003      	b.n	80041ca <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80041c2:	231e      	movs	r3, #30
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041d6:	231e      	movs	r3, #30
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	781b      	ldrb	r3, [r3, #0]
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b008      	add	sp, #32
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	efff69f3 	.word	0xefff69f3
 80041e8:	ffffcfff 	.word	0xffffcfff
 80041ec:	fffff4ff 	.word	0xfffff4ff
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40004400 	.word	0x40004400
 80041fc:	007a1200 	.word	0x007a1200

08004200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2201      	movs	r2, #1
 800420e:	4013      	ands	r3, r2
 8004210:	d00b      	beq.n	800422a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <UART_AdvFeatureConfig+0x144>)
 800421a:	4013      	ands	r3, r2
 800421c:	0019      	movs	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2202      	movs	r2, #2
 8004230:	4013      	ands	r3, r2
 8004232:	d00b      	beq.n	800424c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4a43      	ldr	r2, [pc, #268]	; (8004348 <UART_AdvFeatureConfig+0x148>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2204      	movs	r2, #4
 8004252:	4013      	ands	r3, r2
 8004254:	d00b      	beq.n	800426e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a3b      	ldr	r2, [pc, #236]	; (800434c <UART_AdvFeatureConfig+0x14c>)
 800425e:	4013      	ands	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	2208      	movs	r2, #8
 8004274:	4013      	ands	r3, r2
 8004276:	d00b      	beq.n	8004290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4a34      	ldr	r2, [pc, #208]	; (8004350 <UART_AdvFeatureConfig+0x150>)
 8004280:	4013      	ands	r3, r2
 8004282:	0019      	movs	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2210      	movs	r2, #16
 8004296:	4013      	ands	r3, r2
 8004298:	d00b      	beq.n	80042b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <UART_AdvFeatureConfig+0x154>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	2220      	movs	r2, #32
 80042b8:	4013      	ands	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	4a25      	ldr	r2, [pc, #148]	; (8004358 <UART_AdvFeatureConfig+0x158>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	0019      	movs	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2240      	movs	r2, #64	; 0x40
 80042da:	4013      	ands	r3, r2
 80042dc:	d01d      	beq.n	800431a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4a1d      	ldr	r2, [pc, #116]	; (800435c <UART_AdvFeatureConfig+0x15c>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	035b      	lsls	r3, r3, #13
 80042fe:	429a      	cmp	r2, r3
 8004300:	d10b      	bne.n	800431a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a15      	ldr	r2, [pc, #84]	; (8004360 <UART_AdvFeatureConfig+0x160>)
 800430a:	4013      	ands	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	4013      	ands	r3, r2
 8004322:	d00b      	beq.n	800433c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <UART_AdvFeatureConfig+0x164>)
 800432c:	4013      	ands	r3, r2
 800432e:	0019      	movs	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}
 8004344:	fffdffff 	.word	0xfffdffff
 8004348:	fffeffff 	.word	0xfffeffff
 800434c:	fffbffff 	.word	0xfffbffff
 8004350:	ffff7fff 	.word	0xffff7fff
 8004354:	ffffefff 	.word	0xffffefff
 8004358:	ffffdfff 	.word	0xffffdfff
 800435c:	ffefffff 	.word	0xffefffff
 8004360:	ff9fffff 	.word	0xff9fffff
 8004364:	fff7ffff 	.word	0xfff7ffff

08004368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	2100      	movs	r1, #0
 8004376:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004378:	f7fc ff96 	bl	80012a8 <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2208      	movs	r2, #8
 8004388:	4013      	ands	r3, r2
 800438a:	2b08      	cmp	r3, #8
 800438c:	d10c      	bne.n	80043a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	0391      	lsls	r1, r2, #14
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <UART_CheckIdleState+0x8c>)
 8004398:	9200      	str	r2, [sp, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	f000 f82c 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d001      	beq.n	80043a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e021      	b.n	80043ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2204      	movs	r2, #4
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d10c      	bne.n	80043d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2280      	movs	r2, #128	; 0x80
 80043ba:	03d1      	lsls	r1, r2, #15
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <UART_CheckIdleState+0x8c>)
 80043c0:	9200      	str	r2, [sp, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f000 f818 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 80043c8:	1e03      	subs	r3, r0, #0
 80043ca:	d001      	beq.n	80043d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e00d      	b.n	80043ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2274      	movs	r2, #116	; 0x74
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	01ffffff 	.word	0x01ffffff

080043f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b094      	sub	sp, #80	; 0x50
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	1dfb      	adds	r3, r7, #7
 8004406:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004408:	e0a3      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800440c:	3301      	adds	r3, #1
 800440e:	d100      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004410:	e09f      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fc ff49 	bl	80012a8 <HAL_GetTick>
 8004416:	0002      	movs	r2, r0
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <UART_WaitOnFlagUntilTimeout+0x30>
 8004422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004424:	2b00      	cmp	r3, #0
 8004426:	d13d      	bne.n	80044a4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004428:	f3ef 8310 	mrs	r3, PRIMASK
 800442c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
 8004432:	2301      	movs	r3, #1
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	f383 8810 	msr	PRIMASK, r3
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	494c      	ldr	r1, [pc, #304]	; (800457c <UART_WaitOnFlagUntilTimeout+0x184>)
 800444a:	400a      	ands	r2, r1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004450:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	f383 8810 	msr	PRIMASK, r3
}
 8004458:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445a:	f3ef 8310 	mrs	r3, PRIMASK
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004462:	643b      	str	r3, [r7, #64]	; 0x40
 8004464:	2301      	movs	r3, #1
 8004466:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	f383 8810 	msr	PRIMASK, r3
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2101      	movs	r1, #1
 800447c:	438a      	bics	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	f383 8810 	msr	PRIMASK, r3
}
 800448a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2274      	movs	r2, #116	; 0x74
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e067      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2204      	movs	r2, #4
 80044ac:	4013      	ands	r3, r2
 80044ae:	d050      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	401a      	ands	r2, r3
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d146      	bne.n	8004552 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	0112      	lsls	r2, r2, #4
 80044cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ce:	f3ef 8310 	mrs	r3, PRIMASK
 80044d2:	613b      	str	r3, [r7, #16]
  return(result);
 80044d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f383 8810 	msr	PRIMASK, r3
}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4923      	ldr	r1, [pc, #140]	; (800457c <UART_WaitOnFlagUntilTimeout+0x184>)
 80044f0:	400a      	ands	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f383 8810 	msr	PRIMASK, r3
}
 80044fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004500:	f3ef 8310 	mrs	r3, PRIMASK
 8004504:	61fb      	str	r3, [r7, #28]
  return(result);
 8004506:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	64bb      	str	r3, [r7, #72]	; 0x48
 800450a:	2301      	movs	r3, #1
 800450c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2101      	movs	r1, #1
 8004522:	438a      	bics	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	f383 8810 	msr	PRIMASK, r3
}
 8004530:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2280      	movs	r2, #128	; 0x80
 8004542:	2120      	movs	r1, #32
 8004544:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2274      	movs	r2, #116	; 0x74
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e010      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	4013      	ands	r3, r2
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	425a      	negs	r2, r3
 8004562:	4153      	adcs	r3, r2
 8004564:	b2db      	uxtb	r3, r3
 8004566:	001a      	movs	r2, r3
 8004568:	1dfb      	adds	r3, r7, #7
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d100      	bne.n	8004572 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004570:	e74b      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b014      	add	sp, #80	; 0x50
 800457a:	bd80      	pop	{r7, pc}
 800457c:	fffffe5f 	.word	0xfffffe5f

08004580 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	; 0x30
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	1dbb      	adds	r3, r7, #6
 800458c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1dba      	adds	r2, r7, #6
 8004598:	2158      	movs	r1, #88	; 0x58
 800459a:	8812      	ldrh	r2, [r2, #0]
 800459c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1dba      	adds	r2, r7, #6
 80045a2:	215a      	movs	r1, #90	; 0x5a
 80045a4:	8812      	ldrh	r2, [r2, #0]
 80045a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	015b      	lsls	r3, r3, #5
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d10d      	bne.n	80045d6 <UART_Start_Receive_IT+0x56>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <UART_Start_Receive_IT+0x4c>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	225c      	movs	r2, #92	; 0x5c
 80045c6:	4943      	ldr	r1, [pc, #268]	; (80046d4 <UART_Start_Receive_IT+0x154>)
 80045c8:	5299      	strh	r1, [r3, r2]
 80045ca:	e02e      	b.n	800462a <UART_Start_Receive_IT+0xaa>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	225c      	movs	r2, #92	; 0x5c
 80045d0:	21ff      	movs	r1, #255	; 0xff
 80045d2:	5299      	strh	r1, [r3, r2]
 80045d4:	e029      	b.n	800462a <UART_Start_Receive_IT+0xaa>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10d      	bne.n	80045fa <UART_Start_Receive_IT+0x7a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <UART_Start_Receive_IT+0x70>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	225c      	movs	r2, #92	; 0x5c
 80045ea:	21ff      	movs	r1, #255	; 0xff
 80045ec:	5299      	strh	r1, [r3, r2]
 80045ee:	e01c      	b.n	800462a <UART_Start_Receive_IT+0xaa>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	225c      	movs	r2, #92	; 0x5c
 80045f4:	217f      	movs	r1, #127	; 0x7f
 80045f6:	5299      	strh	r1, [r3, r2]
 80045f8:	e017      	b.n	800462a <UART_Start_Receive_IT+0xaa>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	055b      	lsls	r3, r3, #21
 8004602:	429a      	cmp	r2, r3
 8004604:	d10d      	bne.n	8004622 <UART_Start_Receive_IT+0xa2>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <UART_Start_Receive_IT+0x98>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	225c      	movs	r2, #92	; 0x5c
 8004612:	217f      	movs	r1, #127	; 0x7f
 8004614:	5299      	strh	r1, [r3, r2]
 8004616:	e008      	b.n	800462a <UART_Start_Receive_IT+0xaa>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	225c      	movs	r2, #92	; 0x5c
 800461c:	213f      	movs	r1, #63	; 0x3f
 800461e:	5299      	strh	r1, [r3, r2]
 8004620:	e003      	b.n	800462a <UART_Start_Receive_IT+0xaa>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	225c      	movs	r2, #92	; 0x5c
 8004626:	2100      	movs	r1, #0
 8004628:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	2100      	movs	r1, #0
 8004630:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2222      	movs	r2, #34	; 0x22
 8004636:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004638:	f3ef 8310 	mrs	r3, PRIMASK
 800463c:	61fb      	str	r3, [r7, #28]
  return(result);
 800463e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004642:	2301      	movs	r3, #1
 8004644:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f383 8810 	msr	PRIMASK, r3
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	f383 8810 	msr	PRIMASK, r3
}
 8004668:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	015b      	lsls	r3, r3, #5
 8004672:	429a      	cmp	r2, r3
 8004674:	d107      	bne.n	8004686 <UART_Start_Receive_IT+0x106>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <UART_Start_Receive_IT+0x158>)
 8004682:	665a      	str	r2, [r3, #100]	; 0x64
 8004684:	e002      	b.n	800468c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a14      	ldr	r2, [pc, #80]	; (80046dc <UART_Start_Receive_IT+0x15c>)
 800468a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2274      	movs	r2, #116	; 0x74
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004694:	f3ef 8310 	mrs	r3, PRIMASK
 8004698:	613b      	str	r3, [r7, #16]
  return(result);
 800469a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
 800469e:	2301      	movs	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f383 8810 	msr	PRIMASK, r3
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2190      	movs	r1, #144	; 0x90
 80046b6:	0049      	lsls	r1, r1, #1
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	0018      	movs	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b00c      	add	sp, #48	; 0x30
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	000001ff 	.word	0x000001ff
 80046d8:	08004991 	.word	0x08004991
 80046dc:	08004829 	.word	0x08004829

080046e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ec:	617b      	str	r3, [r7, #20]
  return(result);
 80046ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
 80046f2:	2301      	movs	r3, #1
 80046f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f383 8810 	msr	PRIMASK, r3
}
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4925      	ldr	r1, [pc, #148]	; (80047a0 <UART_EndRxTransfer+0xc0>)
 800470a:	400a      	ands	r2, r1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f383 8810 	msr	PRIMASK, r3
}
 8004718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471a:	f3ef 8310 	mrs	r3, PRIMASK
 800471e:	623b      	str	r3, [r7, #32]
  return(result);
 8004720:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
 8004724:	2301      	movs	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f383 8810 	msr	PRIMASK, r3
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	438a      	bics	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	f383 8810 	msr	PRIMASK, r3
}
 800474a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	2b01      	cmp	r3, #1
 8004752:	d118      	bne.n	8004786 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004754:	f3ef 8310 	mrs	r3, PRIMASK
 8004758:	60bb      	str	r3, [r7, #8]
  return(result);
 800475a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800475e:	2301      	movs	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2110      	movs	r1, #16
 8004776:	438a      	bics	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b00e      	add	sp, #56	; 0x38
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	fffffedf 	.word	0xfffffedf

080047a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	225a      	movs	r2, #90	; 0x5a
 80047b6:	2100      	movs	r1, #0
 80047b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2252      	movs	r2, #82	; 0x52
 80047be:	2100      	movs	r1, #0
 80047c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7ff fbc7 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b004      	add	sp, #16
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047da:	f3ef 8310 	mrs	r3, PRIMASK
 80047de:	60bb      	str	r3, [r7, #8]
  return(result);
 80047e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	2301      	movs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f383 8810 	msr	PRIMASK, r3
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2140      	movs	r1, #64	; 0x40
 80047fc:	438a      	bics	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff fb94 	bl	8003f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b006      	add	sp, #24
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b090      	sub	sp, #64	; 0x40
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004830:	203e      	movs	r0, #62	; 0x3e
 8004832:	183b      	adds	r3, r7, r0
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	215c      	movs	r1, #92	; 0x5c
 8004838:	5a52      	ldrh	r2, [r2, r1]
 800483a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004840:	2b22      	cmp	r3, #34	; 0x22
 8004842:	d000      	beq.n	8004846 <UART_RxISR_8BIT+0x1e>
 8004844:	e095      	b.n	8004972 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	213c      	movs	r1, #60	; 0x3c
 800484c:	187b      	adds	r3, r7, r1
 800484e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004850:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004852:	187b      	adds	r3, r7, r1
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b2da      	uxtb	r2, r3
 8004858:	183b      	adds	r3, r7, r0
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b2d9      	uxtb	r1, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	400a      	ands	r2, r1
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	225a      	movs	r2, #90	; 0x5a
 8004876:	5a9b      	ldrh	r3, [r3, r2]
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b299      	uxth	r1, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	225a      	movs	r2, #90	; 0x5a
 8004882:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	225a      	movs	r2, #90	; 0x5a
 8004888:	5a9b      	ldrh	r3, [r3, r2]
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d178      	bne.n	8004982 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004890:	f3ef 8310 	mrs	r3, PRIMASK
 8004894:	61bb      	str	r3, [r7, #24]
  return(result);
 8004896:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004898:	63bb      	str	r3, [r7, #56]	; 0x38
 800489a:	2301      	movs	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f383 8810 	msr	PRIMASK, r3
}
 80048a4:	46c0      	nop			; (mov r8, r8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4936      	ldr	r1, [pc, #216]	; (800498c <UART_RxISR_8BIT+0x164>)
 80048b2:	400a      	ands	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c2:	f3ef 8310 	mrs	r3, PRIMASK
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
 80048cc:	2301      	movs	r3, #1
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	f383 8810 	msr	PRIMASK, r3
}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2101      	movs	r1, #1
 80048e4:	438a      	bics	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	2b01      	cmp	r3, #1
 8004906:	d12f      	bne.n	8004968 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490e:	f3ef 8310 	mrs	r3, PRIMASK
 8004912:	60fb      	str	r3, [r7, #12]
  return(result);
 8004914:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	633b      	str	r3, [r7, #48]	; 0x30
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f383 8810 	msr	PRIMASK, r3
}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2110      	movs	r1, #16
 8004930:	438a      	bics	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	2210      	movs	r2, #16
 8004948:	4013      	ands	r3, r2
 800494a:	2b10      	cmp	r3, #16
 800494c:	d103      	bne.n	8004956 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2210      	movs	r2, #16
 8004954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2258      	movs	r2, #88	; 0x58
 800495a:	5a9a      	ldrh	r2, [r3, r2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	0011      	movs	r1, r2
 8004960:	0018      	movs	r0, r3
 8004962:	f7ff fb01 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004966:	e00c      	b.n	8004982 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f7fc f82c 	bl	80009c8 <HAL_UART_RxCpltCallback>
}
 8004970:	e007      	b.n	8004982 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2108      	movs	r1, #8
 800497e:	430a      	orrs	r2, r1
 8004980:	619a      	str	r2, [r3, #24]
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	b010      	add	sp, #64	; 0x40
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	fffffedf 	.word	0xfffffedf

08004990 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b090      	sub	sp, #64	; 0x40
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004998:	203e      	movs	r0, #62	; 0x3e
 800499a:	183b      	adds	r3, r7, r0
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	215c      	movs	r1, #92	; 0x5c
 80049a0:	5a52      	ldrh	r2, [r2, r1]
 80049a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a8:	2b22      	cmp	r3, #34	; 0x22
 80049aa:	d000      	beq.n	80049ae <UART_RxISR_16BIT+0x1e>
 80049ac:	e095      	b.n	8004ada <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	213c      	movs	r1, #60	; 0x3c
 80049b4:	187b      	adds	r3, r7, r1
 80049b6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80049b8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80049c0:	187b      	adds	r3, r7, r1
 80049c2:	183a      	adds	r2, r7, r0
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	8812      	ldrh	r2, [r2, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	225a      	movs	r2, #90	; 0x5a
 80049de:	5a9b      	ldrh	r3, [r3, r2]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b299      	uxth	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	225a      	movs	r2, #90	; 0x5a
 80049ea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	225a      	movs	r2, #90	; 0x5a
 80049f0:	5a9b      	ldrh	r3, [r3, r2]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d178      	bne.n	8004aea <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f8:	f3ef 8310 	mrs	r3, PRIMASK
 80049fc:	617b      	str	r3, [r7, #20]
  return(result);
 80049fe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
 8004a02:	2301      	movs	r3, #1
 8004a04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	f383 8810 	msr	PRIMASK, r3
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4936      	ldr	r1, [pc, #216]	; (8004af4 <UART_RxISR_16BIT+0x164>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f383 8810 	msr	PRIMASK, r3
}
 8004a28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2e:	623b      	str	r3, [r7, #32]
  return(result);
 8004a30:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a32:	633b      	str	r3, [r7, #48]	; 0x30
 8004a34:	2301      	movs	r3, #1
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f383 8810 	msr	PRIMASK, r3
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	f383 8810 	msr	PRIMASK, r3
}
 8004a5a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d12f      	bne.n	8004ad0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a76:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a7c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a80:	2301      	movs	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f383 8810 	msr	PRIMASK, r3
}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2110      	movs	r1, #16
 8004a98:	438a      	bics	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b10      	cmp	r3, #16
 8004ab4:	d103      	bne.n	8004abe <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2210      	movs	r2, #16
 8004abc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2258      	movs	r2, #88	; 0x58
 8004ac2:	5a9a      	ldrh	r2, [r3, r2]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	0011      	movs	r1, r2
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7ff fa4d 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ace:	e00c      	b.n	8004aea <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7fb ff78 	bl	80009c8 <HAL_UART_RxCpltCallback>
}
 8004ad8:	e007      	b.n	8004aea <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2108      	movs	r1, #8
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b010      	add	sp, #64	; 0x40
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	fffffedf 	.word	0xfffffedf

08004af8 <memset>:
 8004af8:	0003      	movs	r3, r0
 8004afa:	1882      	adds	r2, r0, r2
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d100      	bne.n	8004b02 <memset+0xa>
 8004b00:	4770      	bx	lr
 8004b02:	7019      	strb	r1, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	e7f9      	b.n	8004afc <memset+0x4>

08004b08 <__libc_init_array>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	2600      	movs	r6, #0
 8004b0c:	4c0c      	ldr	r4, [pc, #48]	; (8004b40 <__libc_init_array+0x38>)
 8004b0e:	4d0d      	ldr	r5, [pc, #52]	; (8004b44 <__libc_init_array+0x3c>)
 8004b10:	1b64      	subs	r4, r4, r5
 8004b12:	10a4      	asrs	r4, r4, #2
 8004b14:	42a6      	cmp	r6, r4
 8004b16:	d109      	bne.n	8004b2c <__libc_init_array+0x24>
 8004b18:	2600      	movs	r6, #0
 8004b1a:	f000 f819 	bl	8004b50 <_init>
 8004b1e:	4c0a      	ldr	r4, [pc, #40]	; (8004b48 <__libc_init_array+0x40>)
 8004b20:	4d0a      	ldr	r5, [pc, #40]	; (8004b4c <__libc_init_array+0x44>)
 8004b22:	1b64      	subs	r4, r4, r5
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	42a6      	cmp	r6, r4
 8004b28:	d105      	bne.n	8004b36 <__libc_init_array+0x2e>
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	00b3      	lsls	r3, r6, #2
 8004b2e:	58eb      	ldr	r3, [r5, r3]
 8004b30:	4798      	blx	r3
 8004b32:	3601      	adds	r6, #1
 8004b34:	e7ee      	b.n	8004b14 <__libc_init_array+0xc>
 8004b36:	00b3      	lsls	r3, r6, #2
 8004b38:	58eb      	ldr	r3, [r5, r3]
 8004b3a:	4798      	blx	r3
 8004b3c:	3601      	adds	r6, #1
 8004b3e:	e7f2      	b.n	8004b26 <__libc_init_array+0x1e>
 8004b40:	08004ba0 	.word	0x08004ba0
 8004b44:	08004ba0 	.word	0x08004ba0
 8004b48:	08004ba4 	.word	0x08004ba4
 8004b4c:	08004ba0 	.word	0x08004ba0

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
